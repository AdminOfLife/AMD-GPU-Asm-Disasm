/*                     
 * Copyright 2011 StreamNovation Ltd. All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are
 * permitted provided that the following conditions are met:
 *
 *    1. Redistributions of source code must retain the above copyright notice, this list of
 *       conditions and the following disclaimer.
 * 
 *    2. Redistributions in binary form must reproduce the above copyright notice, this list
 *       of conditions and the following disclaimer in the documentation and/or other materials
 *       provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY StreamNovation Ltd. ``AS IS'' AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
 * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL StreamNovation Ltd. OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR                                                                                                                    
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON                                                                                                                    
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING                                                                                                                          
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF                                                                                                                        
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                                                                                                                                                                  
 *                                                                                                                                                                                                             
 * The views and conclusions contained in the software and documentation are those of the                                                                                                                      
 * authors and should not be interpreted as representing official policies, either expressed                                                                                                                   
 * or implied, of StreamNovation Ltd.                                                                                                                                                                          
 *                                                                                                                                                                                                             
 *                                                                                                                                                                                                             
 * Author(s):                                                                                                                                                                                                  
 *          Adam Rak <adam.rak@streamnovation.com>
 *    
 *    
 *    
 */

architecture R800 Evergreen;

//==============================================================================
// ALU Instructions
//==============================================================================

 //--------------------------------------------------------------------------
 // ALU_WORD0
 //--------------------------------------------------------------------------
microcode ALU_WORD0(32):
  enum(9) SRC_REG:
    GPR 127:0;
    Kcache_bank0 159:128;
    Kcache_bank1 191:160;
    unnamed_inline_const 218:192;
    Kcache_bank2 287:256;
    Kcache_bank3 319:288;
    SRC_PARAM 511:448;

    ALU_SRC_LDS_OQ_A 219;
    ALU_SRC_LDS_OQ_B 220;
    ALU_SRC_LDS_OQ_A_POP 221;
    ALU_SRC_LDS_OQ_B_POP 222;
    ALU_SRC_LDS_DIRECT_A 223;
    ALU_SRC_LDS_DIRECT_B 224;
    (*missing 226:225*)
    ALU_SRC_TIME_HI 227;
    ALU_SRC_TIME_LO 228;
    ALU_SRC_MASK_HI 229;
    ALU_SRC_MASK_LO 230;
    ALU_SRC_HW_WAVE_ID 231; 
    ALU_SRC_SIMD_ID 232;
    ALU_SRC_SE_ID 233;
    ALU_SRC_HW_THREADGRP_ID 234;
    ALU_SRC_WAVE_ID_IN_GRP 235;
    ALU_SRC_NUM_THREADGRP_WAVES 236;
    ALU_SRC_HW_ALU_ODD 237;
    ALU_SRC_LOOP_IDX 238;
    (*missing 239*)
    ALU_SRC_PARAM_BASE_ADDR 240;
    ALU_SRC_NEW_PRIM_MASK 241;
    (*missing 242*)
    ALU_SRC_PRIM_MASK_LO 243;
    ALU_SRC_1_DBL_L 244;
    ALU_SRC_1_DBL_M 245;
    ALU_SRC_0_5_DBL_L 246;
    ALU_SRC_0_5_DBL_M 247;
    ALU_SRC_0 248;
    ALU_SRC_1 249;
    ALU_SRC_1_INT 250;
    ALU_SRC_M_1_INT 251;
    ALU_SRC_0_5 252;
    ALU_SRC_LITERAL 253;
    ALU_SRC_PV 254;
    ALU_SRC_PS 255;
  end enum;

  enum(2) CHAN_SEL:
    CHAN_X;
    CHAN_Y;
    CHAN_Z;
    CHAN_W;
  end enum;

  enum(6) INDEX_MODE:
    INDEX_AR_X 0 default;
    INDEX_LOOP 4;
    INDEX_GLOBAL 5;
    INDEX_GLOBAL_AR_X 6;
  end enum;

  enum(2) PRED_SEL:
    PRED_SEL_OFF 0 default;
    (*reserved 1*)
    PRED_SEL_ZERO 2;
    PRED_SEL_ONE 3;
  end enum;

  field SRC0_SEL(8:0) SRC_REG;
  field SRC1_SEL(21:13) SRC_REG;
  field SRC0_REL(9) BOOL;
  field SRC1_REL(22) BOOL;
  field SRC0_CHAN(11:10) CHAN_SEL;
  field SRC1_CHAN(24:23) CHAN_SEL;
  field SRC0_NEG(12) BOOL;
  field SRC1_NEG(25) BOOL;
  field INDEX_MODE(28:26) INDEX_MODE;
  field PRED_SEL(30:29) PRED_SEL;
  field LAST(31) BOOL;
end microcode;

//--------------------------------------------------------------------------
// ALU_WORD1_OP2
//--------------------------------------------------------------------------
microcode ALU_WORD1_OP2(32):
  enum(2) OMOD:
    ALU_OMOD_OFF default;
    ALU_OMOD_M2;
    ALU_OMOD_M4;
    ALU_OMOD_D2;
  end enum;

  enum(11) ALU_INST:
    // 0 to 95 are for vector or transcendental units
    OP2_INST_ADD  0;
    OP2_INST_MUL  1;
    OP2_INST_MUL_IEEE  2;
    OP2_INST_MAX  3;
    OP2_INST_MIN  4;
    OP2_INST_MAX_DX10  5;
    OP2_INST_MIN_DX10  6;
    (*reserved 7*)
    OP2_INST_SETE  8;
    OP2_INST_SETGT  9;
    OP2_INST_SETGE 10;
    OP2_INST_SETNE 11;
    OP2_INST_SETE_DX10 12;
    OP2_INST_SETGT_DX10 13;
    OP2_INST_SETGE_DX10 14;
    OP2_INST_SETNE_DX10 15;
    OP2_INST_FRACT 16;
    OP2_INST_TRUNC 17;
    OP2_INST_CEIL 18;
    OP2_INST_RNDNE 19;
    OP2_INST_FLOOR 20;
    OP2_INST_ASHR_INT 21;
    OP2_INST_LSHR_INT 22;
    OP2_INST_LSHL_INT 23;
    (*reserved 24*)
    OP2_INST_MOV 25;
    OP2_INST_NOP 26;
    OP2_INST_MUL_64_S 27;
    OP2_INST_FLT64_TO_FLT32_S 28;
    OP2_INST_FLT32_TO_FLT64_S 29;
    OP2_INST_PRED_SETGT_UINT 30;
    OP2_INST_PRED_SETGE_UINT 31;
    OP2_INST_PRED_SETE 32;
    OP2_INST_PRED_SETGT 33;
    OP2_INST_PRED_SETGE 34;
    OP2_INST_PRED_SETNE 35;
    OP2_INST_PRED_SET_INV 36;
    OP2_INST_PRED_SET_POP 37;
    OP2_INST_PRED_SET_CLR 38;
    OP2_INST_PRED_SET_RESTORE 39;
    OP2_INST_PRED_SETE_PUSH 40;
    OP2_INST_PRED_SETGT_PUSH 41;
    OP2_INST_PRED_SETGE_PUSH 42;
    OP2_INST_PRED_SETNE_PUSH 43;
    OP2_INST_KILLE 44;
    OP2_INST_KILLGT 45;
    OP2_INST_KILLGE 46;
    OP2_INST_KILLNE 47;
    OP2_INST_AND_INT 48;
    OP2_INST_OR_INT 49;
    OP2_INST_XOR_INT 50;
    OP2_INST_NOT_INT 51;
    OP2_INST_ADD_INT 52;
    OP2_INST_SUB_INT 53;
    OP2_INST_MAX_INT 54;
    OP2_INST_MIN_INT 55;
    OP2_INST_MAX_UINT 56;
    OP2_INST_MIN_UINT 57;
    OP2_INST_SETE_INT 58;
    OP2_INST_SETGT_INT 59;
    OP2_INST_SETGE_INT 60;
    OP2_INST_SETNE_INT 61;
    OP2_INST_SETGT_UINT 62;
    OP2_INST_SETGE_UINT 63;
    OP2_INST_KILLGT_UINT 64;
    OP2_INST_KILLGE_UINT 65;
    OP2_INST_PREDE_INT 66;
    OP2_INST_PRED_SETGT_INT 67;
    OP2_INST_PRED_SETGE_INT 68;
    OP2_INST_PRED_SETNE_INT 69;
    OP2_INST_KILLE_INT 70;
    OP2_INST_KILLGT_INT 71;
    OP2_INST_KILLGE_INT 72;
    OP2_INST_KILLNE_INT 73;
    OP2_INST_PRED_SETE_PUSH_INT 74;
    OP2_INST_PRED_SETGT_PUSH_INT 75;
    OP2_INST_PRED_SETGE_PUSH_INT 76;
    OP2_INST_PRED_SETNE_PUSH_INT 77;
    OP2_INST_PRED_SETLT_PUSH_INT 78;
    OP2_INST_PRED_SETLE_PUSH_INT 79;
    OP2_INST_FLT_TO_INT 80;
    OP2_INST_BFREV_INT 81;
    OP2_INST_ADDC_UINT 82;
    OP2_INST_SUBB_UINT 83;
    OP2_INST_GROUP_BARRIER 84;
    OP2_INST_GROUP_SEQ_BEGIN 85;
    OP2_INST_GROUP_SEQ_END 86;
    OP2_INST_SET_MODE 87;
    OP2_INST_SET_CF_IDX0 88;
    OP2_INST_SET_CF_IDX1 89;
    OP2_INST_SET_LDS_SIZE 90;
    (*reserved 128:91*)

    // 129 to 159 are for transcendental units only
    OP2_INST_EXP_IEEE 129;
    OP2_INST_LOG_CLAMPED 130;
    OP2_INST_LOG_IEEE 131;
    OP2_INST_RECIP_CLAMPED 132;
    OP2_INST_RECIP_FF 133;
    OP2_INST_RECIP_IEEE 134;
    OP2_INST_RECIPSQRT_CLAMPED 135;
    OP2_INST_RECIPSQRT_FF 136;
    OP2_INST_RECIPSQRT_IEEE 137;
    OP2_INST_SQRT_IEEE 138;
    OP2_INST_SIN 141;
    OP2_INST_COS 142;
    OP2_INST_MULLO_INT 143;
    OP2_INST_MULHI_INT 144;
    OP2_INST_MULLO_UINT 145;
    OP2_INST_MULHI_UINT 146;
    OP2_INST_RECIP_INT 147;
    OP2_INST_RECIP_UINT 148;
    OP2_INST_RECIP_64 149;
    OP2_INST_RECIP_CLAMPED_64 150;
    OP2_INST_RECIPSQRT_64 151;
    OP2_INST_RECIPSQRT_CLAMPED_64 152;
    OP2_INST_SQRT_64 153;
    OP2_INST_FLT_TO_UINT 154;
    OP2_INST_INT_TO_FLT 155;
    OP2_INST_UINT_TO_FLT 156;

    // 160 to 255 are for vector units only
    OP2_INST_BFM_INT 160;
    OP2_INST_FLT32_TO_FLT16 162;
    OP2_INST_FLT16_TO_FLT32 163;
    OP2_INST_UBYTE0_FLT 164;
    OP2_INST_UBYTE1_FLT 165;
    OP2_INST_UBYTE2_FLT 166;
    OP2_INST_UBYTE3_FLT 167;
    OP2_INST_BCNT_INT 170;
    OP2_INST_FFBH_UINT 171;
    OP2_INST_FFBL_INT 172;
    OP2_INST_FFBH_INT 173;
    OP2_INST_FLT_TO_UINT4 174;
    OP2_INST_DOT_IEEE 175;
    OP2_INST_FLT_TO_INT_RPI 176;
    OP2_INST_FLT_TO_INT_FLOOR 177;
    OP2_INST_MULHI_UINT24 178;
    OP2_INST_MBCNT_32HI_INT 179;
    OP2_INST_OFFSET_TO_FLT 180;
    OP2_INST_MUL_UINT24 181;
    OP2_INST_BCNT_ACCUM_PREV_INT 182;
    OP2_INST_MBCNT_32LO_ACCUM_PREV_INT 183;
    OP2_INST_SETE_64 184;
    OP2_INST_SETNE_64 185;
    OP2_INST_SETGT_64 186;
    OP2_INST_SETGE_64 187;
    OP2_INST_MIN_64     188;
    OP2_INST_MAX_64     189;
    OP2_INST_DOT4     190;
    OP2_INST_DOT4_IEEE 191;
    OP2_INST_CUBE     192;
    OP2_INST_MAX4     193;
    OP2_INST_FREXP_64 196;
    OP2_INST_LDEXP_64 197;
    OP2_INST_FRACT_64 198;
    OP2_INST_PRED_SETGT_64 199;
    OP2_INST_PRED_SETE_64 200;
    OP2_INST_PRED_SETGE_64 201;
    OP2_INST_MUL_64_V     202;
    OP2_INST_ADD_64     203;
    OP2_INST_MOVA_INT 204;
    OP2_INST_FLT64_TO_FLT32_V 205;
    OP2_INST_FLT32_TO_FLT64_V 206;
    OP2_INST_SAD_ACCUM_PREV_UINT 207;
    OP2_INST_DOT     208;
    OP2_INST_MUL_PREV 209;
    OP2_INST_MUL_IEEE_PREV 210;
    OP2_INST_ADD_PREV 211;
    OP2_INST_MULADD_PREV 212;
    OP2_INST_MULADD_IEEE_PREV 213;
    OP2_INST_INTERP_XY 214;
    OP2_INST_INTERP_ZW 215;
    OP2_INST_INTERP_X 216;
    OP2_INST_INTERP_Z 217;
    OP2_INST_STORE_FLAGS 218;
    OP2_INST_LOAD_STORE_FLAGS 219;
    OP2_INST_LDS_1A 220; // DO NOT USE
    OP2_INST_LDS_1A1D 221; // DO NOT USE
    (*missing 222*)
    OP2_INST_LDS_2A 223; // DO NOT USE
    OP2_INST_INTERP_LOAD_P0 224;
    OP2_INST_INTERP_LOAD_P10 225;
    OP2_INST_INTERP_LOAD_P20 226;
  end enum;

  enum(3) BANK_SWIZZLE:
    ALU_VEC_012 0 default;
    ALU_VEC_021 1;
    ALU_VEC_120 2;
    ALU_VEC_102 3;
    ALU_VEC_201 4;
    ALU_VEC_210 5;
    (*reserved 6:8*)
  end enum;

  enum(2) CHAN_SEL:
    CHAN_X;
    CHAN_Y;
    CHAN_Z;
    CHAN_W;
  end enum;

  field SRC0_ABS(0) BOOL;
  field SRC1_ABS(1) BOOL;
  field UPDATE_EXEC_MASK(2) BOOL;
  field UPDATE_PRED(3) BOOL;
  field WRITE_MASK(4) BOOL;
  field OMOD(6:5) OMOD;
  field ALU_INST(17:7) ALU_INST;
  field BANK_SWIZZLE (20:18) BANK_SWIZZLE;
  field DST_GPR(27:21) INT;
  field DST_REL(28) BOOL;
  field DST_CHAN(30:29) CHAN_SEL;
  field CLAMP (31) BOOL;
end microcode;

//--------------------------------------------------------------------------
// ALU_WORD1_OP3
//--------------------------------------------------------------------------
microcode ALU_WORD1_OP3(32):
  enum(9) SRC2_SEL:
    GPR 127:0;
    KCACHE_CONST_IN_BANK_0 159:128;
    KCACHE_CONST_IN_BANK_1 191:160;
    CONSTS 218:192;
    KCACHE_CONST_IN_BANK_2 287:256;
    KCACHE_CONST_IN_BANK_3 319:288;
    ALU_SRC_LDS_OQ_A 219;
    ALU_SRC_LDS_OQ_B 220;
    ALU_SRC_LDS_OQ_A_POP 221;
    ALU_SRC_LDS_OQ_B_POP 222;
    ALU_SRC_LDS_DIRECT_A 223;
    ALU_SRC_LDS_DIRECT_B 224;
    ALU_SRC_TIME_HI 227;
    ALU_SRC_TIME_LO 228;
    ALU_SRC_MASK_HI 229;
    ALU_SRC_MASK_LO 230;
    ALU_SRC_HW_WAVE_ID 231;
    ALU_SRC_SIMD_ID 232;
    ALU_SRC_SE_ID 233;
    ALU_SRC_HW_THREADGRP_ID 234;
    ALU_SRC_WAVE_ID_IN_GRP 235;
    ALU_SRC_NUM_THREADGRP_WAVES 236;
    ALU_SRC_HW_ALU_ODD 237;
    ALU_SRC_LOOP_IDX 238;
    ALU_SRC_PARAM_BASE_ADDR 240;
    ALU_SRC_NEW_PRIM_MASK 241;
    ALU_SRC_PRIM_MASK_HI 242;
    ALU_SRC_PRIM_MASK_LO 243;
    ALU_SRC_1_DBL_L 244;
    ALU_SRC_1_DBL_M 245;
    ALU_SRC_0_5_DBL_L 246;
    ALU_SRC_0_5_DBL_M 247;
    ALU_SRC_0 248;
    ALU_SRC_1 249;
    ALU_SRC_1_INT 250;
    ALU_SRC_M_1_INT 251;
    ALU_SRC_0_5 252;
    ALU_SRC_LITERAL 253;
    ALU_SRC_PV 254;
    ALU_SRC_PS 255;
  end enum;

  enum(2) CHAN_SEL:
    CHAN_X;
    CHAN_Y;
    CHAN_Z;
    CHAN_W;
  end enum;

  enum(5) ALU_INST:
    (*Vector_only 4:17*)
    (*Vector_or_trans 20:31*)
    (*Trans_only 31*)
    OP3_INST_BFE_UINT  4;
    OP3_INST_BFE_INT  5;
    OP3_INST_BFI_INT  6;
    OP3_INST_FMA  7;
    OP3_INST_CNDNE_64  9;
    OP3_INST_FMA_64 10;
    OP3_INST_LERP_UINT 11;
    OP3_INST_BIT_ALIGN_INT 12;
    OP3_INST_BYTE_ALIGN_INT 13;
    OP3_INST_SAD_ACCUM_UINT 14;
    OP3_INST_SAD_ACCUM_HI_UINT 15;
    OP3_INST_MULADD_UINT24 16;
    OP3_INST_LDS_IDX_OP 17;
    OP3_INST_MULADD 20;
    OP3_INST_MULADD_M2 21;
    OP3_INST_MULADD_M4 22;
    OP3_INST_MULADD_D2 23;
    OP3_INST_MULADD_IEEE 24;
    OP3_INST_CNDE 25;
    OP3_INST_CNDGT 26;
    OP3_INST_CNDGE 27;
    OP3_INST_CNDE_INT 28;
    OP3_INST_CNDGT_INT 29;
    OP3_INST_CNDGE_INT 30;
    OP3_INST_MUL_LIT 31;
  end enum;

  enum(3) BANK_SWIZZLE:
    ALU_VEC_012 0 default;
    ALU_VEC_021 1;
    ALU_VEC_120 2;
    ALU_VEC_102 3;
    ALU_VEC_201 4;
    ALU_VEC_210 5;
    (*reserved 8:6*)
  end enum;

  field SRC2_SEL (8:0) SRC2_SEL;
  field SRC2_REL (9) BOOL;
  field SRC2_CHAN (11:10) CHAN_SEL;
  field SRC2_NEG (12) BOOL;
  field ALU_INST (17:13) ALU_INST;
  field BANK_SWIZZLE (20:18) BANK_SWIZZLE;
  field DST_GPR (27:21) INT;
  field DST_REL (28) BOOL;
  field DST_CHAN (30:29) CHAN_SEL;
  field CLAMP (31) BOOL;
end microcode;

//--------------------------------------------------------------------------
// ALU_WORD0_LDS_IDX_OP
//--------------------------------------------------------------------------
microcode ALU_WORD0_LDS_IDX_OP(32):
  enum(9) SRC_SEL:
    GPR 127:0;
    KCACHE_CONST_IN_BANK_0 159:128;
    KCACHE_CONST_IN_BANK_1 191:160;
    CONSTS 218:192;
    KCACHE_CONST_IN_BANK_2 287:256;
    KCACHE_CONST_IN_BANK_3 319:288;
    ALU_SRC_LDS_OQ_A 219;
    ALU_SRC_LDS_OQ_B 220;
    ALU_SRC_LDS_OQ_A_POP 221;
    ALU_SRC_LDS_OQ_B_POP 222;
    ALU_SRC_LDS_DIRECT_A 223;
    ALU_SRC_LDS_DIRECT_B 224;
    ALU_SRC_TIME_HI 227;
    ALU_SRC_TIME_LO 228;
    ALU_SRC_MASK_HI 229;
    ALU_SRC_MASK_LO 230;
    ALU_SRC_HW_WAVE_ID 231;
    ALU_SRC_SIMD_ID 232;
    ALU_SRC_SE_ID 233;
    ALU_SRC_HW_THREADGRP_ID 234;
    ALU_SRC_WAVE_ID_IN_GRP 235;
    ALU_SRC_NUM_THREADGRP_WAVES 236;
    ALU_SRC_HW_ALU_ODD 237;
    ALU_SRC_LOOP_IDX 238;
    ALU_SRC_PARAM_BASE_ADDR 240;
    ALU_SRC_NEW_PRIM_MASK 241;
    ALU_SRC_PRIM_MASK_HI 242;
    ALU_SRC_PRIM_MASK_LO 243;
    ALU_SRC_1_DBL_L 244;
    ALU_SRC_1_DBL_M 245;
    ALU_SRC_0_5_DBL_L 246;
    ALU_SRC_0_5_DBL_M 247;
    ALU_SRC_0 248;
    ALU_SRC_1 249;
    ALU_SRC_1_INT 250;
    ALU_SRC_M_1_INT 251;
    ALU_SRC_0_5 252;
    ALU_SRC_LITERAL 253;
    ALU_SRC_PV 254;
    ALU_SRC_PS 255;
  end enum;

  enum(2) SRC_CHAN:
    CHAN_X;
    CHAN_Y;
    CHAN_Z;
    CHAN_W;
  end enum;

  enum(3) INDEX_MODE:
    INDEX_AR_X 0;
    INDEX_LOOP 4;
    INDEX_GLOBAL 5;
    INDEX_GLOBAL_AR_X 6;
  end enum;

  enum(2) PRED_SEL:
    PRED_SEL_OFF 0;
    (*reserved 1*)
    PRED_SEL_ZERO 2;
    PRED_SEL_ONE 3;
  end enum;

  field SRC0_SEL (8:0) SRC_SEL;
  field SRC1_SEL (21:13) SRC_SEL;
  field SRC0_REL (9) BOOL;
  field SRC1_REL (22) BOOL;
  field SRC0_CHAN (11:10) SRC_CHAN;
  field SRC1_CHAN (24:23) SRC_CHAN;
  field IDX_OFFSET_4 (12) BOOL;
  field IDX_OFFSET_5 (25) BOOL;
  field INDEX_MODE (28:26) INDEX_MODE;
  field PRED_SEL (30:29) PRED_SEL;
  field LAST (31) BOOL;
end microcode;

//--------------------------------------------------------------------------
// ALU_WORD1_LDS_IDX_OP
//--------------------------------------------------------------------------
microcode ALU_WORD1_LDS_IDX_OP(32):
  enum(9) SRC_SEL:
    GPR 127:0;
    KCACHE_CONST_IN_BANK_0 159:128;
    KCACHE_CONST_IN_BANK_1 191:160;
    CONSTS 218:192;
    KCACHE_CONST_IN_BANK_2 287:256;
    KCACHE_CONST_IN_BANK_3 319:288;
    ALU_SRC_LDS_OQ_A 219;
    ALU_SRC_LDS_OQ_B 220;
    ALU_SRC_LDS_OQ_A_POP 221;
    ALU_SRC_LDS_OQ_B_POP 222;
    ALU_SRC_LDS_DIRECT_A 223;
    ALU_SRC_LDS_DIRECT_B 224;
    ALU_SRC_TIME_HI 227;
    ALU_SRC_TIME_LO 228;
    ALU_SRC_MASK_HI 229;
    ALU_SRC_MASK_LO 230;
    ALU_SRC_HW_WAVE_ID 231;
    ALU_SRC_SIMD_ID 232;
    ALU_SRC_SE_ID 233;
    ALU_SRC_HW_THREADGRP_ID 234;
    ALU_SRC_WAVE_ID_IN_GRP 235;
    ALU_SRC_NUM_THREADGRP_WAVES 236;
    ALU_SRC_HW_ALU_ODD 237;
    ALU_SRC_LOOP_IDX 238;
    ALU_SRC_PARAM_BASE_ADDR 240;
    ALU_SRC_NEW_PRIM_MASK 241;
    ALU_SRC_PRIM_MASK_HI 242;
    ALU_SRC_PRIM_MASK_LO 243;
    ALU_SRC_1_DBL_L 244;
    ALU_SRC_1_DBL_M 245;
    ALU_SRC_0_5_DBL_L 246;
    ALU_SRC_0_5_DBL_M 247;
    ALU_SRC_0 248;
    ALU_SRC_1 249;
    ALU_SRC_1_INT 250;
    ALU_SRC_M_1_INT 251;
    ALU_SRC_0_5 252;
    ALU_SRC_LITERAL 253;
    ALU_SRC_PV 254;
    ALU_SRC_PS 255;
  end enum;

  enum(2) CHAN_SEL:
    CHAN_X;
    CHAN_Y;
    CHAN_Z;
    CHAN_W;
  end enum;

  enum(5) ALU_INST:
    (*reserved 16:0*)
    OP3_INST_LDS_IDX_OP 17;
    (*reserved 31:18*)
  end enum;

  enum(3) BANK_SWIZZLE:
    ALU_VEC_012 0 default;
    ALU_VEC_021 1;
    ALU_VEC_120 2;
    ALU_VEC_102 3;
    ALU_VEC_201 4;
    ALU_VEC_210 5;
    (*reserved 8:6*)
  end enum;

  enum(6) LDS_OP:
    DS_INST_ADD  0;
    DS_INST_SUB  1;
    DS_INST_RSUB  2;
    DS_INST_INC  3;
    DS_INST_DEC  4;
    DS_INST_MIN_INT  5;
    DS_INST_MAX_INT  6;
    DS_INST_MIN_UINT  7;
    DS_INST_MAX_UINT  8;
    DS_INST_AND  9;
    DS_INST_OR 10;
    DS_INST_XOR 11;
    DS_INST_MSKOR 12;
    DS_INST_WRITE 13;
    DS_INST_WRITE_REL 14;
    DS_INST_WRITE2 15;
    DS_INST_CMP_STORE 16;
    DS_INST_CMP_STORE_SPF 17;
    DS_INST_BYTE_WRITE 18;
    DS_INST_SHORT_WRITE 19;
    (*reserved 20-31*)
    DS_INST_ADD_RET 32;
    DS_INST_SUB_RET 33;
    DS_INST_RSUB_RET 34;
    DS_INST_INC_RET 35;
    DS_INST_DEC_RET 36;
    DS_INST_MIN_INT_RET 37;
    DS_INST_MAX_INT_RET 38;
    DS_INST_MIN_UINT_RET 39;
    DS_INST_MAX_UINT_RET 40;
    DS_INST_AND_RET 41;
    DS_INST_OR_RET 42;
    DS_INST_XOR_RET 43;
    DS_INST_MSKOR_RET 44;
    DS_INST_XCHG_RET 45;
    DS_INST_XCHG_REL_RET 46;
    DS_INST_XCHG2_RET 47;
    DS_INST_CMP_XCHG_RET 48;
    DS_INST_CMP_XCHG_SPF_RET 49;
    DS_INST_READ_RET 50;
    DS_INST_READ_REL_RET 51;
    DS_INST_READ2_RET 52;
    DS_INST_READWRITE_RET 53;
    DS_INST_BYTE_READ_RET 54;
    DS_INST_UBYTE_READ_RET 55;
    DS_INST_SHORT_READ_RET 56;
    DS_INST_USHORT_READ_RET 57;
    (*reserved 62:58*)
    DS_INST_ATOMIC_ORDERED_ALLOC_RET 63;
  end enum;

  field SRC2_SEL (8:0) SRC_SEL;
  field SRC2_REL (9) BOOL;
  field SRC2_CHAN (11:10) CHAN_SEL;
  field IDX_OFFSET_1 (12) BOOL;
  field ALU_INST (17:13) ALU_INST;
  field BANK_SWIZZLE (20:18) BANK_SWIZZLE;
  field LDS_OP (26:21) LDS_OP;
  field IDX_OFFSET_0 (27) BOOL;
  field IDX_OFFSET_2 (28) BOOL;
  field DST_CHAN (30:29) CHAN_SEL;
  field IDX_OFFSET_3 (31) BOOL;
end microcode;

//--------------------------------------------------------------------------
// ALU_WORD1_LDS_DIRECT_LITERAL_LO
//--------------------------------------------------------------------------
microcode ALU_WORD1_LDS_DIRECT_LITERAL_LO(32):
  field OFFSET_A (12:0) INT;
  field STRIDE_A (19:13) INT;
  field RESERVED (21:20) INT;
  field THREAD_REL_A (22) BOOL;
  field RESERVED2 (31:23) INT;
end microcode;

//--------------------------------------------------------------------------
// ALU_WORD1_LDS_DIRECT_LITERAL_HI
//--------------------------------------------------------------------------
microcode ALU_WORD1_LDS_DIRECT_LITERAL_HI(32):
  field OFFSET_B (12:0) INT;
  field STRIDE_B (19:13) INT;
  field RESERVED (21:20) INT;
  field THREAD_REL_B (22) BOOL;
  field RESERVED2 (30:23) INT;
  field DIRECT_READ_32 (31) BOOL;
end microcode;


//==============================================================================
// Memory Read Instructions
//==============================================================================

//--------------------------------------------------------------------------
// MEM_RD_WORD0
//--------------------------------------------------------------------------
microcode TMEM_RD_WORD0(32):
  enum(3) MEM_OP:
    MEM_RD_SCRATCH 0;
    MEM_RD_SCATTER 2;
    (*reserved 7:4*)
  end enum;

  enum(5) VC_INST:
    VC_INST_MEM 2;
  end enum;

  enum(2) SRC_SEL_X:
    SEL_X;
    SEL_Y;
    SEL_Z;
    SEL_W;
  end enum;

  field VC_INST(4:0) VC_INST;
  field ELEM_SIZE(6:5) INT;
  field FETCH_WHOLE_QUAD(7) BOOL;
  field MEM_OP(10:8) MEM_OP;
  field UNCACHED (11) BOOL;
  field INDEXED (12) BOOL;
  field MEM_REQ_SIZE (14:13) INT;
  field RESERVED (15) BOOL;
  field SRC_GPR (22:16) INT;
  field SRC_REL (23) BOOL;
  field SRC_SEL_X(25:24) SRC_SEL_X;
  field BURST_CNT (29:26) INT;
  field RESERVED2 (31:30) INT;
end microcode;

//--------------------------------------------------------------------------
// MEM_RD_WORD1
//--------------------------------------------------------------------------
microcode TMEM_RD_WORD1(32):
  enum(3) CHAN_SEL:
    SEL_X 0;
    SEL_Y 1;
    SEL_Z 2;
    SEL_W 3;
    SEL_0 4;
    SEL_1 5;
    (*reserved 6*)
    SEL_MASK 7;
  end enum;

  enum(2) NUM_FORMAT_ALL:
    NUM_FORMAT_NORM 0;
    NUM_FORMAT_INT 1;
    NUM_FORMAT_SCALED 2;
  end enum;

  enum(2) FORMAT_COMP_ALL:
    FORMAT_COMP_UNSIGNED 0;
    FORMAT_COMP_SIGNED 1;
  end enum;

  enum(1) SRF_MODE_ALL:
    SRF_MODE_ZERO_CLAMP_MINUS_ONE 0 default;
    SRF_MODE_NO_ZERO 1;
  end enum;

   enum(6) DATA_FORMAT:
    FMT_INVALID 0 default;
    FMT_8 1;
    FMT_4_4 2;
    FMT_3_3_2 3;
    FMT_RESERVED_4 4;
    FMT_16 5;
    FMT_16_FLOAT 6;
    FMT_8_8 7;
    FMT_5_6_5 8;
    FMT_6_5_5 9;
    FMT_1_5_5_5 10;
    FMT_4_4_4_4 11;
    FMT_5_5_5_1 12;
    FMT_32 13;
    FMT_32_FLOAT 14;
    FMT_16_16 15;
    FMT_16_16_FLOAT 16;
    FMT_8_24 17;
    FMT_8_24_FLOAT 18;
    FMT_24_8 19;
    FMT_24_8_FLOAT 20;
    FMT_10_11_11 21;
    FMT_10_11_11_FLOAT 22;
    FMT_11_11_10 23;
    FMT_11_11_10_FLOAT 24;
    FMT_2_10_10_10 25;
    FMT_8_8_8_8 26;
    FMT_10_10_10_2 27;
    FMT_X24_8_32_FLOAT 28;
    FMT_32_32 29;
    FMT_32_32_FLOAT 30;
    FMT_16_16_16_16 31;
    FMT_16_16_16_16_FLOAT 32;
    FMT_RESERVED_33 33;
    FMT_32_32_32_32 34;
    FMT_32_32_32_32_FLOAT 35;
    FMT_RESERVED_36 36;
    FMT_1 37;
    FMT_1_REVERSED 38;
    FMT_GB_GR 39;
    FMT_BG_RG 40;
    FMT_32_AS_8 41;
    FMT_32_AS_8_8 42;
    FMT_5_9_9_9_SHAREDEXP 43;
    FMT_8_8_8 44;
    FMT_16_16_16 45;
    FMT_16_16_16_FLOAT 46;
    FMT_32_32_32 47;
    FMT_32_32_32_FLOAT 48;
    FMT_BC1 49;
    FMT_BC2 50;
    FMT_BC3 51;
    FMT_BC4 52;
    FMT_BC5 53;
    FMT_APC0 54;
    FMT_APC1 55;
    FMT_APC2 56;
    FMT_APC3 57;
    FMT_APC4 58;
    FMT_APC5 59;
    FMT_APC6 60;
    FMT_APC7 61;
    FMT_CTX1 62;
    FMT_RESERVED_63 63;
  end enum;
  
  field DST_GPR (6:0) INT;
  field DST_REL (7) BOOL;
  field RESERVED (8) BOOL;
  field DST_SEL_X (11:9) CHAN_SEL;
  field DST_SEL_Y (14:12) CHAN_SEL;
  field DST_SEL_Z (17:15) CHAN_SEL;
  field DST_SEL_W (20:18) CHAN_SEL;
  field RESERVED2 (21) BOOL;
  field DATA_FORMAT (27:22) DATA_FORMAT;
  field NUM_FORMAT_ALL (29:28) NUM_FORMAT_ALL;
  field FORMAT_COMP_ALL (30) FORMAT_COMP_ALL;
  field SRF_MODE_ALL (31) SRF_MODE_ALL;
end microcode;

//--------------------------------------------------------------------------
// MEM_RD_WORD2
//--------------------------------------------------------------------------
microcode TMEM_RD_WORD2(32):
  enum(2) ENDIAN_SWAP:
    ENDIAN_NONE 0 default;
    ENDIAN_8IN16 1;
    ENDIAN_8IN32 2;
  end enum;

  field ARRAY_BASE (12:0) INT;
  field RESERVED (15:13) INT;
  field ENDIAN_SWAP (17:16) ENDIAN_SWAP;
  field RESERVED2 (19:18) INT;
  field ARRAY_SIZE (31:20) INT;
end microcode;

//==============================================================================
// Helper definitions
//==============================================================================

microcode padding_32(32):
end microcode;

microcode LITERAL_CONSTANT_32(32):
/*handled internally*/
end microcode;


//==============================================================================
// Control Flow (CF) Instructions
//==============================================================================

//--------------------------------------------------------------------------
// CF_WORD0
//--------------------------------------------------------------------------
microcode CF_WORD0(32):
  enum(3) JUMPTABLE_SE:
    CF_JUMPTABLE_SEL_CONST_A;
    CF_JUMPTABLE_SEL_CONST_B;
    CF_JUMPTABLE_SEL_CONST_C;
    CF_JUMPTABLE_SEL_CONST_D;
    CF_JUMPTABLE_SEL_INDEX_0;
    CF_JUMPTABLE_SEL_INDEX_1;
  end enum;

  field ADDR(23:0) INT;
  field JUMPTABLE_SE(26:24) JUMPTABLE_SE;
  field Reserved(31:27) INT;
end microcode;

//--------------------------------------------------------------------------
// CF_GWS_WORD0
//--------------------------------------------------------------------------
microcode CF_GWS_WORD0(32):
  enum(2) VAL_INDEX_MO:
    GWS_INDEX_NONE default;
    GWS_INDEX_0;
    GWS_INDEX_1;
    GWS_INDEX_MIX;
  end enum;

  enum(2) RSRC_INDEX_M:
    CF_INDEX_NONE default;
    CF_INDEX_0;
    CF_INDEX_1;
    CF_INVALID;
  end enum;

  enum(2) GWS_OPCODE:
    GWS_SEMA_V;
    GWS_SEMA_P;
    GWS_BARRIER;
    GWS_INIT;
  end enum;

  field VALUE (9:0) INT;
  field RESERVED (15:10) INT;
  field RESOURCE (20:16) INT;
  field RESERVED2 (24:21) INT;
  field SIGN (25) BOOL;
  field VAL_INDEX_MO (27:26) VAL_INDEX_MO;
  field RSRC_INDEX_M (29:28) RSRC_INDEX_M;
  field GWS_OPCODE (31:30) GWS_OPCODE;
end microcode;

//--------------------------------------------------------------------------
// CF_GWS_WORD1
//--------------------------------------------------------------------------
microcode CF_WORD1(32):
  enum(2) COND:
    CF_COND_ACTIVE 0 default;
    CF_COND_FALSE 1;
    CF_COND_BOOL 2;
    CF_COND_NOT_BOOL 3;
  end enum;

  enum(8) CF_INST:
    CF_INST_NOP 0;
    CF_INST_TC 1;
    CF_INST_VC 2;
    CF_INST_GDS 3;
    CF_INST_LOOP_START 4;
    CF_INST_LOOP_END 5;
    CF_INST_LOOP_START_DX10 6;
    CF_INST_LOOP_START_NO_AL 7;
    CF_INST_LOOP_CONTINUE 8;
    CF_INST_LOOP_BREAK 9;
    CF_INST_JUMP 10;
    CF_INST_PUSH 11;
    (*reserved 12*)
    CF_INST_ELSE 13;
    CF_INST_POP 14;
    (*reserved 17:15*)
    CF_INST_CALL 18;
    CF_INST_CALL_FS 19;
    CF_INST_RETURN 20;
    CF_INST_EMIT_VERTEX 21;
    CF_INST_EMIT_CUT_VERTEX 22;
    CF_INST_CUT_VERTEX 23;
    CF_INST_KILL 24;
    (*reserved 25*)
    CF_INST_WAIT_ACK 26;
    CF_INST_TC_ACK 27;
    CF_INST_VC_ACK 28;
    CF_INST_JUMPTABLE 29;
    CF_INST_GLOBAL_WAVE_SYNC 30;
    CF_INST_HALT 31;
  end enum;

  field POP_COUNT(2:0) INT;
  field CF_CONST(7:3) INT;
  field COND(9:8) COND;
  field COUNT(15:10) INT;
  field Reserved(19:16) INT;
  field VALID_PIXEL_MODE(20) BOOL;
  field END_OF_PROGRAM(21) BOOL;
  field CF_INST(29:22) CF_INST;
  field WHOLE_QUAD_MODE(30) BOOL;
  field BARRIER(31) BOOL;
end microcode;

//--------------------------------------------------------------------------
// CF_ALU_WORD0
//--------------------------------------------------------------------------
microcode CF_ALU_WORD0(32):
  enum(2) CACHE_MODE:
    CF_KCACHE_NOP 0 default;
    CF_KCACHE_LOCK_1 1;
    CF_KCACHE_LOCK_2 2;
    CF_KCACHE_LOCK_LOOP_INDEX 3;
  end enum;

  field ADDR(21:0) INT;
  field KCACHE_BANK0(25:22) INT;
  field KCACHE_BANK1(29:26) INT;
  field KCACHE_MODE0(31:30) CACHE_MODE;
end microcode;

//--------------------------------------------------------------------------
// CF_ALU_WORD1
//--------------------------------------------------------------------------
microcode CF_ALU_WORD1(32):
  enum(2) CACHE_MODE:
    CF_KCACHE_NOP 0 default;
    CF_KCACHE_LOCK_1 1;
    CF_KCACHE_LOCK_2 2;
    CF_KCACHE_LOCK_LOOP_INDEX 3;
  end enum;

  enum(4) CF_INST:
    CF_INST_ALU 8;
    CF_INST_ALU_PUSH_BEFORE 9;
    CF_INST_ALU_POP_AFTER 10;
    CF_INST_ALU_POP2_AFTER 11;
    CF_INST_ALU_EXTENDED 12;
    CF_INST_ALU_CONTINUE 13;
    CF_INST_ALU_BREAK 14;
    CF_INST_ALU_ELSE_AFTER 15;
  end enum;

  field KCACHE_MODE1(1:0) CACHE_MODE;
  field KCACHE_ADDR0(9:2) INT;
  field KCACHE_ADDR1(17:10) INT;
  field COUNT(24:18) INT;
  field ALT_CONST(25) BOOL;
  field CF_INST(29:26) CF_INST;
  field WHOLE_QUAD_MODE(30) BOOL;
  field BARRIER(31) BOOL;
end microcode;

//--------------------------------------------------------------------------
// CF_ALU_WORD0_EXT
//--------------------------------------------------------------------------
microcode CF_ALU_WORD0_EXT(32):
  enum(2) KCACHE_BANK_INDEX_MODE:
    CF_INDEX_NONE default;
    CF_INDEX_0;
    CF_INDEX_1;
    CF_INVALID;
  end enum;

  enum(2) KCACHE_MODE2:
    CF_KCACHE_NOP;
    CF_KCACHE_LOCK_1;
    CF_KCACHE_LOCK_2;
    CF_KCACHE_LOCK_LOOP_INDEX;
  end enum;

  field RESERVED (3:0) INT;
  field KCACHE_BANK_INDEX_MODE0 (5:4) KCACHE_BANK_INDEX_MODE;
  field KCACHE_BANK_INDEX_MODE1 (7:6) KCACHE_BANK_INDEX_MODE;
  field KCACHE_BANK_INDEX_MODE2 (9:8) KCACHE_BANK_INDEX_MODE;
  field KCACHE_BANK_INDEX_MODE3 (11:10) KCACHE_BANK_INDEX_MODE;
  field RESERVED2 (21:12) INT;
  field KCACHE_BANK2 (25:22) INT;
  field KCACHE_BANK3 (29:26) INT;
  field KCACHE_MODE2 (31:30) KCACHE_MODE2;
end microcode;

//--------------------------------------------------------------------------
// CF_ALU_WORD1_EXT
//--------------------------------------------------------------------------
microcode CF_ALU_WORD1_EXT(32):
  enum(2) KCACHE_MODE3:
    CF_KCACHE_NOP;
    CF_KCACHE_LOCK_1;
    CF_KCACHE_LOCK_2;
    CF_KCACHE_LOCK_LOOP_INDEX;
  end enum;

  enum(4) CF_INST:
    CF_INST_ALU  8;
    CF_INST_ALU_PUSH_BEFORE  9;
    CF_INST_ALU_POP_AFTER 10;
    CF_INST_ALU_POP2_AFTER 11;
    CF_INST_ALU_EXTENDED 12;
    CF_INST_ALU_CONTINUE 13;
    CF_INST_ALU_BREAK 14;
    CF_INST_ALU_ELSE_AFTER 15;
  end enum;

  field KCACHE_MODE3 (1:0) KCACHE_MODE3;
  field KCACHE_ADDR2 (9:2) INT;
  field KCACHE_ADDR3 (17:10) INT;
  (*  field Reserved (25:18) INT; *)
  field CF_INST (29:26) CF_INST;
  (*  field Reserved (30) INT; *)
  field BARRIER (31) BOOL;
end microcode;

//--------------------------------------------------------------------------
// CF_ALLOC_EXPORT_WORD0
//--------------------------------------------------------------------------
microcode CF_ALLOC_EXPORT_WORD0(32):
  enum(2) TYPE:
    EXPORT_PIXEL;
    EXPORT_POS;
    EXPORT_PARAM;
    EXPORT_WRITE_IND_ACK;
  end enum;

  field ARRAY_BASE (12:0) INT;
  field TYPE (14:13) TYPE;
  field RW_GPR (21:15) INT;
  field RW_REL (22) BOOL;
  field INDEX_GPR (29:23) INT;
  field ELEM_SIZE (31:30) INT;
end microcode;

//--------------------------------------------------------------------------
// CF_ALLOC_EXPORT_WORD0_RAT
//-------------------------------------------------------------------------- 
microcode CF_ALLOC_EXPORT_WORD0_RAT(32):
  enum(6) RAT_INST:
    EXPORT_RAT_INST_NOP 0;
    EXPORT_RAT_INST_STORE_TYPED 1;
    EXPORT_RAT_INST_STORE_RAW 2;
    EXPORT_RAT_INST_STORE_RAW_FDENORM 3;
    EXPORT_RAT_INST_CMPXCHG_INT 4;
    EXPORT_RAT_INST_CMPXCHG_FLT 5;
    EXPORT_RAT_INST_CMPXCHG_FDENORM 6;
    EXPORT_RAT_INST_ADD 7;
    EXPORT_RAT_INST_SUB 8;
    EXPORT_RAT_INST_RSUB 9;
    EXPORT_RAT_INST_MIN_INT 10;
    EXPORT_RAT_INST_MIN_UINT 11;
    EXPORT_RAT_INST_MAX_INT 12;
    EXPORT_RAT_INST_MAX_UINT 13;
    EXPORT_RAT_INST_AND 14;
    EXPORT_RAT_INST_OR 15;
    EXPORT_RAT_INST_XOR 16;
    EXPORT_RAT_INST_MSKOR 17;
    EXPORT_RAT_INST_INC_UINT 18;
    EXPORT_RAT_INST_DEC_UINT 19;
    (*reserved 31:20*)
    EXPORT_RAT_INST_NOP_RTN 32;
    (*reserved 33*)
    EXPORT_RAT_INST_XCHG_RTN 34;
    EXPORT_RAT_INST_XCHG_FDENORM_RTN 35;
    EXPORT_RAT_INST_CMPXCHG_INT_RTN 36;
    EXPORT_RAT_INST_CMPXCHG_FLT_RTN 37;
    EXPORT_RAT_INST_CMPXCHG_FDENORM_RTN 38;
    EXPORT_RAT_INST_ADD_RTN 39;
    EXPORT_RAT_INST_SUB_RTN 40;
    EXPORT_RAT_INST_RSUB_RTN 41;
    EXPORT_RAT_INST_MIN_INT_RTN 42;
    EXPORT_RAT_INST_MIN_UINT_RTN 43;
    EXPORT_RAT_INST_MAX_INT_RTN 44;
    EXPORT_RAT_INST_MAX_UINT_RTN 45;
    EXPORT_RAT_INST_AND_RTN 46;
    EXPORT_RAT_INST_OR_RTN 47;
    EXPORT_RAT_INST_XOR_RTN 48;
    EXPORT_RAT_INST_MSKOR_RTN 49;
    EXPORT_RAT_INST_INC_UINT_RTN 50;
    EXPORT_RAT_INST_DEC_UINT_RTN 51;
  end enum;

  enum(2) RAT_INDEX_MODE:
    CF_INDEX_NONE default;
    CF_INDEX_0;
    CF_INDEX_1;
    CF_INVALID;
  end enum;


  field RAT_ID(3:0) INT;
  field RAT_INST(9:4) RAT_INST;
  field Reserved (10) INT;
  field RAT_INDEX_MODE (12:11) RAT_INDEX_MODE;
  field TYPE(14:13) INT;
  field RW_GPR(21:15) INT;
  field RW_REL(22) BOOL;
  field INDEX_GPR(29:23) INT;
  field ELEM_SIZE(31:30) INT;
end microcode;

//--------------------------------------------------------------------------
// CF_ALLOC_EXPORT_WORD1_BUF
//-------------------------------------------------------------------------- 
microcode CF_ALLOC_EXPORT_WORD1_BUF(32):
  enum(8) CF_INST:
    CF_INST_MEM_STREAM0_BUF0 64;
    CF_INST_MEM_STREAM0_BUF1 65;
    CF_INST_MEM_STREAM0_BUF2 66;
    CF_INST_MEM_STREAM0_BUF3 67;
    CF_INST_MEM_STREAM1_BUF0 68;
    CF_INST_MEM_STREAM1_BUF1 69;
    CF_INST_MEM_STREAM1_BUF2 70;
    CF_INST_MEM_STREAM1_BUF3 71;
    CF_INST_MEM_STREAM2_BUF0 72;
    CF_INST_MEM_STREAM2_BUF1 73;
    CF_INST_MEM_STREAM2_BUF2 74;
    CF_INST_MEM_STREAM2_BUF3 75;
    CF_INST_MEM_STREAM3_BUF0 76;
    CF_INST_MEM_STREAM3_BUF1 77;
    CF_INST_MEM_STREAM3_BUF2 78;
    CF_INST_MEM_STREAM3_BUF3 79;
    CF_INST_MEM_WR_SCRATCH 80;
    (*missing 81*)
    CF_INST_MEM_RING 82;
    (*reserved 84:83*)
    CF_INST_MEM_EXPORT 85;
    CF_INST_MEM_RAT 86;
    CF_INST_MEM_RAT_CACHELESS 87;
    CF_INST_MEM_RING1 88;
    CF_INST_MEM_RING2 89;
    CF_INST_MEM_RING3 90;
    CF_INST_MEM_EXPORT_COMBINED 91;
    CF_INST_MEM_RAT_COMBINED_CACHELESS 92;
  end enum;

  field ARRAY_SIZE(11:0) INT;
  field COMP_MASK(15:12) INT;
  field BURST_COUNT(19:16) INT;
  field VALID_PIXEL_MODE(20) BOOL;
  field END_OF_PROGRAM(21) BOOL;
  field CF_INST(29:22) CF_INST;
  field MARK(30) BOOL;
  field BARRIER(31) BOOL;
end microcode;

//--------------------------------------------------------------------------
// CF_ALLOC_EXPORT_WORD1_SWIZ
//-------------------------------------------------------------------------- 
microcode CF_ALLOC_EXPORT_WORD1_SWIZ(32):
  enum(3) CHAN_SEL:
    SEL_X 0;
    SEL_Y 1;
    SEL_Z 2;
    SEL_W 3;
    SEL_0 4;
    SEL_1 5;
    (*reserved 6*)
    SEL_MASK 7;
  end enum;

  enum(8) CF_INST:
    CF_INST_EXPORT 83;
    CF_INST_EXPORT_DONE 84;
  end enum;

  field SEL_X (2:0) CHAN_SEL;
  field SEL_Y (5:3) CHAN_SEL;
  field SEL_Z (8:6) CHAN_SEL;
  field SEL_W (11:9) CHAN_SEL;
  field Reserved (15:12) INT;
  field BURST_COUNT (19:16) INT;
  field VALID_PIXEL_MODE (20) BOOL;
  field END_OF_PROGRAM (21) BOOL;
  field CF_INST (29:22) CF_INST;
  field MARK (30) BOOL;
  field BARRIER (31) BOOL;
end microcode;


//==============================================================================
// Instructions for Fetches Through a Vertex Cache Clause
//==============================================================================

//--------------------------------------------------------------------------
// VTX_WORD0
//-------------------------------------------------------------------------- 
microcode VTX_WORD0(32):
  enum(5) VC_INST:
    VC_INST_FETCH 0;
    VC_INST_SEMANTIC 1;
    VC_INST_GET_BUFFER_RESINFO 14;
  end enum;

  enum(2) FETCH_TYPE:
    VTX_FETCH_VERTEX_DATA 0;
    VTX_FETCH_INSTANCE_DATA 1;
    VTX_FETCH_NO_INDEX_OFFSET 2;
  end enum;

  enum(2) CHAN_SEL:
    SEL_X;
    SEL_Y;
    SEL_Z;
    SEL_W;
  end enum;

  field VC_INST(4:0) VC_INST;
  field FETCH_TYPE(6:5) FETCH_TYPE;
  field FETCH_WHOLE_QUAD(7) BOOL;
  field BUFFER_ID(15:8) INT;
  field SRC_GPR(22:16) INT;
  field SRC_REL(23) BOOL;
  field SRC_SEL_X(25:24) CHAN_SEL;
  field MEGA_FETCH_COUNT(31:26) INT;
end microcode;

//--------------------------------------------------------------------------
// VTX_WORD1_GPR
//-------------------------------------------------------------------------- 
microcode VTX_WORD1_GPR(32):
  enum(3) CHAN_SEL:
    SEL_X 0;
    SEL_Y 1;
    SEL_Z 2;
    SEL_W 3;
    SEL_0 4;
    SEL_1 5;
    (*reserved 6*)
    SEL_MASK 7;
  end enum;

  enum(2) NUM_FORMAT_ALL:
    NUM_FORMAT_NORM 0;
    NUM_FORMAT_INT 1;
    NUM_FORMAT_SCALED 2;
  end enum;

  enum(1) FORMAT_COMP_ALL:
    FORMAT_COMP_UNSIGNED 0 default;
    FORMAT_COMP_SIGNED 1;
  end enum;

  enum(1) SRF_MODE_ALL:
    SRF_MODE_ZERO_CLAMP_MINUS_ONE 0 default;
    SRF_MODE_NO_ZERO 1;
  end enum;

  enum(6) DATA_FORMAT:
    FMT_INVALID 0 default;
    FMT_8 1;
    FMT_4_4 2;
    FMT_3_3_2 3;
    FMT_RESERVED_4 4;
    FMT_16 5;
    FMT_16_FLOAT 6;
    FMT_8_8 7;
    FMT_5_6_5 8;
    FMT_6_5_5 9;
    FMT_1_5_5_5 10;
    FMT_4_4_4_4 11;
    FMT_5_5_5_1 12;
    FMT_32 13;
    FMT_32_FLOAT 14;
    FMT_16_16 15;
    FMT_16_16_FLOAT 16;
    FMT_8_24 17;
    FMT_8_24_FLOAT 18;
    FMT_24_8 19;
    FMT_24_8_FLOAT 20;
    FMT_10_11_11 21;
    FMT_10_11_11_FLOAT 22;
    FMT_11_11_10 23;
    FMT_11_11_10_FLOAT 24;
    FMT_2_10_10_10 25;
    FMT_8_8_8_8 26;
    FMT_10_10_10_2 27;
    FMT_X24_8_32_FLOAT 28;
    FMT_32_32 29;
    FMT_32_32_FLOAT 30;
    FMT_16_16_16_16 31;
    FMT_16_16_16_16_FLOAT 32;
    FMT_RESERVED_33 33;
    FMT_32_32_32_32 34;
    FMT_32_32_32_32_FLOAT 35;
    FMT_RESERVED_36 36;
    FMT_1 37;
    FMT_1_REVERSED 38;
    FMT_GB_GR 39;
    FMT_BG_RG 40;
    FMT_32_AS_8 41;
    FMT_32_AS_8_8 42;
    FMT_5_9_9_9_SHAREDEXP 43;
    FMT_8_8_8 44;
    FMT_16_16_16 45;
    FMT_16_16_16_FLOAT 46;
    FMT_32_32_32 47;
    FMT_32_32_32_FLOAT 48;
    FMT_BC1 49;
    FMT_BC2 50;
    FMT_BC3 51;
    FMT_BC4 52;
    FMT_BC5 53;
    FMT_APC0 54;
    FMT_APC1 55;
    FMT_APC2 56;
    FMT_APC3 57;
    FMT_APC4 58;
    FMT_APC5 59;
    FMT_APC6 60;
    FMT_APC7 61;
    FMT_CTX1 62;
    FMT_RESERVED_63 63;
  end enum;

  field DST_GPR(6:0) INT;
  field DST_REL(7) BOOL;
  field DST_SEL_X(11:9) CHAN_SEL;
  field DST_SEL_Y(14:12) CHAN_SEL;
  field DST_SEL_Z(17:15) CHAN_SEL;
  field DST_SEL_W(20:18) CHAN_SEL;
  field USE_CONST_FIELDS(21) BOOL;
  field DATA_FORMAT(27:22) DATA_FORMAT;
  field NUM_FORMAT_ALL(29:28) NUM_FORMAT_ALL;
  field FORMAT_COMP_ALL(30) FORMAT_COMP_ALL;
  field SRF_MODE_ALL(31) SRF_MODE_ALL;
end microcode;

//--------------------------------------------------------------------------
// VTX_WORD1_SEM
//-------------------------------------------------------------------------- 
microcode VTX_WORD1_SEM(32):
  enum(3) CHAN_SEL:
    SEL_X 0;
    SEL_Y 1;
    SEL_Z 2;
    SEL_W 3;
    SEL_0 4;
    SEL_1 5;
    (*reserved 6*)
    SEL_MASK 7;
  end enum;

  enum(2) NUM_FORMAT_ALL:
    NUM_FORMAT_NORM 0;
    NUM_FORMAT_INT 1;
    NUM_FORMAT_SCALED 2;
  end enum;

  enum(1) FORMAT_COMP_ALL:
    FORMAT_COMP_UNSIGNED 0 default;
    FORMAT_COMP_SIGNED 1;
  end enum;

  enum(1) SRF_MODE_ALL:
    SRF_MODE_ZERO_CLAMP_MINUS_ONE 0 default;
    SRF_MODE_NO_ZERO 1;
  end enum;
  
  enum(6) DATA_FORMAT:
    FMT_INVALID 0 default;
    FMT_8 1;
    FMT_4_4 2;
    FMT_3_3_2 3;
    FMT_RESERVED_4 4;
    FMT_16 5;
    FMT_16_FLOAT 6;
    FMT_8_8 7;
    FMT_5_6_5 8;
    FMT_6_5_5 9;
    FMT_1_5_5_5 10;
    FMT_4_4_4_4 11;
    FMT_5_5_5_1 12;
    FMT_32 13;
    FMT_32_FLOAT 14;
    FMT_16_16 15;
    FMT_16_16_FLOAT 16;
    FMT_8_24 17;
    FMT_8_24_FLOAT 18;
    FMT_24_8 19;
    FMT_24_8_FLOAT 20;
    FMT_10_11_11 21;
    FMT_10_11_11_FLOAT 22;
    FMT_11_11_10 23;
    FMT_11_11_10_FLOAT 24;
    FMT_2_10_10_10 25;
    FMT_8_8_8_8 26;
    FMT_10_10_10_2 27;
    FMT_X24_8_32_FLOAT 28;
    FMT_32_32 29;
    FMT_32_32_FLOAT 30;
    FMT_16_16_16_16 31;
    FMT_16_16_16_16_FLOAT 32;
    FMT_RESERVED_33 33;
    FMT_32_32_32_32 34;
    FMT_32_32_32_32_FLOAT 35;
    FMT_RESERVED_36 36;
    FMT_1 37;
    FMT_1_REVERSED 38;
    FMT_GB_GR 39;
    FMT_BG_RG 40;
    FMT_32_AS_8 41;
    FMT_32_AS_8_8 42;
    FMT_5_9_9_9_SHAREDEXP 43;
    FMT_8_8_8 44;
    FMT_16_16_16 45;
    FMT_16_16_16_FLOAT 46;
    FMT_32_32_32 47;
    FMT_32_32_32_FLOAT 48;
    FMT_BC1 49;
    FMT_BC2 50;
    FMT_BC3 51;
    FMT_BC4 52;
    FMT_BC5 53;
    FMT_APC0 54;
    FMT_APC1 55;
    FMT_APC2 56;
    FMT_APC3 57;
    FMT_APC4 58;
    FMT_APC5 59;
    FMT_APC6 60;
    FMT_APC7 61;
    FMT_CTX1 62;
    FMT_RESERVED_63 63;
  end enum;

  field SEMANTIC_ID (7:0) INT;
  field DST_SEL_X (11:9) CHAN_SEL;
  field DST_SEL_Y (14:12) CHAN_SEL;
  field DST_SEL_Z (17:15) CHAN_SEL;
  field DST_SEL_W (20:18) CHAN_SEL;
  field USE_CONST_FIELDS (21) BOOL;
  field DATA_FORMAT (27:22) DATA_FORMAT;
  field NUM_FORMAT_ALL (29:28) NUM_FORMAT_ALL;
  field FORMAT_COMP_ALL (30) FORMAT_COMP_ALL;
  field SRF_MODE_ALL (31) SRF_MODE_ALL;
end microcode;

//--------------------------------------------------------------------------
// VTX_WORD2
//-------------------------------------------------------------------------- 
microcode VTX_WORD2(32):
  enum(2) ENDIAN_SWAP:
    ENDIAN_NONE 0 default;
    ENDIAN_8IN16 1;
    ENDIAN_8IN32 2;
  end enum;

  enum(2) BUFFER_INDEX_MODE:
    CF_INDEX_NONE 0 default;
    CF_INDEX_0 1;
    CF_INDEX_1 2;
    CF_INVALID 3;
  end enum;

  field OFFSET(15:0) INT;
  field ENDIAN_SWAP(17:16) ENDIAN_SWAP;
  field CONST_BUF_NO_STRIDE(18) BOOL;
  field MEGA_FETCH(19) BOOL;
  field ALT_CONST(20) BOOL;
  field BUFFER_INDEX_MODE(22:21) BUFFER_INDEX_MODE;
  field RESERVED (31:23) INT;
end microcode;


//==============================================================================
// Instructions for Fetches Through a Texture Cache Clause
//==============================================================================

//--------------------------------------------------------------------------
// TEX_WORD0
//-------------------------------------------------------------------------- 
microcode TEX_WORD0(32):
  enum(5) TEX_INST:
    (*reserved 2:0*)
    TEX_INST_LD  3;
    TEX_INST_GET_TEXTURE_RESINFO  4;
    TEX_INST_GET_NUMBER_OF_SAMPLES  5;
    TEX_INST_GET_COMP_TEX_LOD  6;
    TEX_INST_GET_GRADIENTS_H  7;
    TEX_INST_GET_GRADIENTS_V  8;
    TEX_INST_SET_TEXTURE_OFFSETS  9;
    TEX_INST_KEEP_GRADIENTS 10;
    TEX_INST_SET_GRADIENTS_H 11;
    TEX_INST_SET_GRADIENTS_V 12;
    (*reserved 15:13*)
    TEX_INST_SAMPLE 16;
    TEX_INST_SAMPLE_L 17;
    TEX_INST_SAMPLE_LB 18;
    TEX_INST_SAMPLE_LZ 19;
    TEX_INST_SAMPLE_G 20;
    TEX_INST_GATHER4 21;
    TEX_INST_SAMPLE_G_LB 22;
    TEX_INST_GATHER4_O 23;
    TEX_INST_SAMPLE_C 24;
    TEX_INST_SAMPLE_C_L 25;
    TEX_INST_SAMPLE_C_LB 26;
    TEX_INST_SAMPLE_C_LZ 27;
    TEX_INST_SAMPLE_C_G 28;
    TEX_INST_GATHER4_C 29;
    TEX_INST_SAMPLE_C_G_LB 30;
    TEX_INST_GATHER4_C_O 31;
  end enum;

  enum(2) INDEX_MODE:
    CF_INDEX_NONE;
    CF_INDEX_0;
    CF_INDEX_1;
    CF_INVALID;
  end enum;

  field TEX_INST (4:0) TEX_INST;
  field INST_MOD (6:5) INT;
  field FETCH_WHOLE_QUAD (7) BOOL;
  field RESOURCE_ID (15:8) INT;
  field SRC_GPR (22:16) INT;
  field SRC_REL (23) BOOL;
  field ALT_CONST (24) BOOL;
  field RESOURCE_INDEX_MODE (26:25) INDEX_MODE;
  field SAMPLER_INDEX_MODE (28:27) INDEX_MODE;
  field RESERVED (31:29) INT;
end microcode;

//--------------------------------------------------------------------------
// TEX_WORD1
//-------------------------------------------------------------------------- 
microcode TEX_WORD1(32):
  enum(3) CHAN_SEL:
    SEL_X 0;
    SEL_Y 1;
    SEL_Z 2;
    SEL_W 3;
    SEL_0 4;
    SEL_1 5;
    (*reserved 6*)
    SEL_MASK 7;
  end enum;

  enum(2) COORD_TYPE:
    TEX_UNNORMALIZED 0;
    TEX_NORMALIZED 1;
  end enum;

  field DST_GPR (6:0) INT;
  field DST_REL (7) BOOL;
  field DST_SEL_X (11:9) CHAN_SEL;
  field DST_SEL_Y (14:12) CHAN_SEL;
  field DST_SEL_Z (17:15) CHAN_SEL;
  field DST_SEL_W (20:18) CHAN_SEL;
  field LOD_BIAS (27:21) INT;
  field COORD_TYPE_X (28) COORD_TYPE;
  field COORD_TYPE_Y (29) COORD_TYPE;
  field COORD_TYPE_Z (30) COORD_TYPE;
  field COORD_TYPE_W (31) COORD_TYPE;
end microcode;

//--------------------------------------------------------------------------
// TEX_WORD2
//-------------------------------------------------------------------------- 
microcode TEX_WORD2(32):
  enum(3) SRC_SEL:
    SEL_X 0;
    SEL_Y 1;
    SEL_Z 2;
    SEL_W 3;
    SEL_0 4;
    SEL_1 5;
  end enum;

  field OFFSET_X (4:0) INT;
  field OFFSET_Y (9:5) INT;
  field OFFSET_Z (14:10) INT;
  field SAMPLER_ID (19:15) INT;
  field SRC_SEL_X (22:20) SRC_SEL;
  field SRC_SEL_Y (25:23) SRC_SEL;
  field SRC_SEL_Z (28:26) SRC_SEL;
  field SRC_SEL_W (31:29) SRC_SEL;
end microcode;


//==============================================================================
//  Global Data Share Read/Write Instructions
//==============================================================================

//--------------------------------------------------------------------------
// MEM_GDS_WORD0
//--------------------------------------------------------------------------
microcode MEM_GDS_WORD0(32):
  enum(5) MEM_INST:
    MEM_INST_MEM 2;
  end enum;

  enum(3) MEM_OP:
    (*reserved 3:0*)
    MEM_GDS_UNI 4;
    MEM_TF_WRITE 5;
    (*reserved 7:6*)
  end enum;

  enum(2) SRC_REL_MODE:
    REL_NONE 0;
    REL_LOOP 1;
    REL_GLOBAL 2;
  end enum;

  enum(3) SRC_SEL:
    SEL_X 0;
    SEL_Y 1;
    SEL_Z 2;
    SEL_W 3;
    SEL_0 4;
    SEL_1 5;
    SEL_UNUSED 7;
    (*reserved 7:6*)
  end enum;

  field MEM_INST (4:0) MEM_INST;
//   field RESERVED (7:5) INT;
  field MEM_OP (10:8) MEM_OP;
  field SRC_GPR (17:11) INT;
  field SRC_REL_MODE (19:18) SRC_REL_MODE;
  field SRC_SEL_X (22:20) SRC_SEL;
  field SRC_SEL_Y (25:23) SRC_SEL;
  field SRC_SEL_Z (28:26) SRC_SEL;
//   field RESERVED2 (31:29) INT;
end microcode;

//--------------------------------------------------------------------------
// MEM_GDS_WORD1
//--------------------------------------------------------------------------
microcode MEM_GDS_WORD1(32):
  enum(2) DST_REL_MODE:
    REL_NONE 0;
    REL_LOOP 1;
    REL_GLOBAL 2;
  end enum;

  enum(6) GDS_OP:
    DS_INST_ADD  0;
    DS_INST_SUB  1;
    DS_INST_RSUB  2;
    DS_INST_INC  3;
    DS_INST_DEC  4;
    DS_INST_MIN_INT  5;
    DS_INST_MAX_INT  6;
    DS_INST_MIN_UINT  7;
    DS_INST_MAX_UINT  8;
    DS_INST_AND  9;
    DS_INST_OR 10;
    DS_INST_XOR 11;
    DS_INST_MSKOR 12;
    DS_INST_WRITE 13;
    DS_INST_WRITE_REL 14;
    DS_INST_WRITE2 15;
    DS_INST_CMP_STORE 16;
    DS_INST_CMP_STORE_SPF 17;
    DS_INST_BYTE_WRITE 18;
    DS_INST_SHORT_WRITE 19;
    (*reserved 20-31*)
    DS_INST_ADD_RET 32;
    DS_INST_RSUB_RET 34;
    DS_INST_INC_RET 35;
    DS_INST_DEC_RET 36;
    DS_INST_MIN_INT_RET 37;
    DS_INST_MAX_INT_RET 38;
    DS_INST_MIN_UINT_RET 39;
    DS_INST_MAX_UINT_RET 40;
    DS_INST_AND_RET 41;
    DS_INST_OR_RET 42;
    DS_INST_XOR_RET 43;
    DS_INST_MSKOR_RET 44;
    DS_INST_XCHG_RET 45;
    DS_INST_XCHG_REL_RET 46;
    DS_INST_XCHG2_RET 47;
    DS_INST_CMP_XCHG_RET 48;
    DS_INST_CMP_XCHG_SPF_RET 49;
    DS_INST_READ_RET 50;
    DS_INST_READ_REL_RET 51;
    DS_INST_READ2_RET 52;
    DS_INST_READWRITE_RET 53;
    DS_INST_BYTE_READ_RET 54;
    DS_INST_UBYTE_READ_RET 55;
    DS_INST_SHORT_READ_RET 56;
    DS_INST_USHORT_READ_RET 57;
    (*reserved 62:58*)
    DS_INST_ATOMIC_ORDERED_ALLOC_RET 63;
  end enum;

  enum(2) UAV_INDEX_MODE:
    CF_INDEX_NONE 0 default;
    CF_INDEX_0 1;
    CF_INDEX_1 2;
    CF_INDEX_INVALID 3;
  end enum;

  field DST_GPR (6:0) INT;
  field DST_REL_MODE (8:7) DST_REL_MODE;
  field GDS_OP (14:9) GDS_OP;
  field RESERVED (15) BOOL;
  field SRC_GPR (22:16) INT;
  field RESERVED2 (23) BOOL;
  field UAV_INDEX_MODE (25:24) UAV_INDEX_MODE;
  field UAV_ID (29:26) INT;
  field ALLOC_CONSUME (30) BOOL;
  field BCAST_FIRST_REQ (31) BOOL;
end microcode;

//--------------------------------------------------------------------------
// MEM_GDS_WORD2
//--------------------------------------------------------------------------
microcode MEM_GDS_WORD2(32):
  enum(3) DST_SEL:
    SEL_X 0;
    SEL_Y 1;
    SEL_Z 2;
    SEL_W 3;
    SEL_0 4;
    SEL_1 5;
    (*reserved 6*)
    SEL_MASK 7;
  end enum;

  field DST_SEL_X (2:0) DST_SEL;
  field DST_SEL_Y (5:3) DST_SEL;
  field DST_SEL_Z (8:6) DST_SEL;
  field DST_SEL_W (11:9) DST_SEL;
//   field RESERVED (31:12) INT;
end microcode;


//==============================================================================
// Control Flow (CF) Instructions
//==============================================================================

//--------------------------------------------------------------------------
// CF ALU template
//--------------------------------------------------------------------------
#define CF_ALU_TEMPLATE( instr ) \
    tuple instr (64): \
    microcode CF_ALU_WORD0; \
    microcode CF_ALU_WORD1; \
    option ADDR_IS_ALU; \
    constraints: \
      CF_ALU_WORD1.CF_INST == CF_INST_ ## instr; \
    end constraints; \
    end tuple \

//--------------------------------------------------------------------------
// CF ALU instructions
//--------------------------------------------------------------------------
CF_ALU_TEMPLATE( ALU );
CF_ALU_TEMPLATE( ALU_BREAK );
CF_ALU_TEMPLATE( ALU_CONTINUE );
CF_ALU_TEMPLATE( ALU_ELSE_AFTER );
CF_ALU_TEMPLATE( ALU_POP_AFTER );
CF_ALU_TEMPLATE( ALU_POP2_AFTER );
CF_ALU_TEMPLATE( ALU_PUSH_BEFORE );

//--------------------------------------------------------------------------
// Extended CF ALU template
//--------------------------------------------------------------------------
#define EXT_CF_ALU_TEMPLATE( instr ) \
    tuple instr (128): \
    microcode CF_ALU_WORD0; \
    microcode CF_ALU_WORD1; \
    microcode CF_ALU_WORD0_EXT; \
    microcode CF_ALU_WORD1_EXT; \
    option ADDR_IS_ALU; \
    \
    constraints: \
      CF_ALU_WORD1.CF_INST == CF_INST_ ## instr; \
    end constraints; \
    end tuple \

//--------------------------------------------------------------------------
// Extended CF ALU instructions
//--------------------------------------------------------------------------
EXT_CF_ALU_TEMPLATE( ALU_EXTENDED );

//--------------------------------------------------------------------------
// CF template
//--------------------------------------------------------------------------
#define CF_TEMPLATE( instr ) \
    tuple instr (64): \
    microcode CF_WORD0; \
    microcode CF_WORD1; \
    option JUMPTABLE_SE_MEANS_NOTHING;\
    \
    constraints: \
      CF_WORD1.CF_INST == CF_INST_ ## instr; \
    end constraints; \
    end tuple

#define CF_TEMPLATE_OPT( instr , op) \
    tuple instr (64): \
    microcode CF_WORD0; \
    microcode CF_WORD1; \
    option JUMPTABLE_SE_MEANS_NOTHING;\
    option op; \
    \
    constraints: \
      CF_WORD1.CF_INST == CF_INST_ ## instr; \
    end constraints; \
    end tuple

//--------------------------------------------------------------------------
// CF instructions
//--------------------------------------------------------------------------
CF_TEMPLATE_OPT( CALL, ADDR_IS_CF);
CF_TEMPLATE( CALL_FS);
CF_TEMPLATE( CUT_VERTEX);
CF_TEMPLATE_OPT( ELSE, ADDR_IS_CF);
CF_TEMPLATE( EMIT_CUT_VERTEX );
CF_TEMPLATE( EMIT_VERTEX );
CF_TEMPLATE_OPT( GDS, ADDR_IS_MEM_GDS);
CF_TEMPLATE( HALT );
CF_TEMPLATE_OPT( JUMP, ADDR_IS_CF);
CF_TEMPLATE( JUMPTABLE );
CF_TEMPLATE( KILL );
//   CF_TEMPLATE( LOOP_BREAK ); 
//   CF_TEMPLATE( LOOP_CONTINUE ); 
CF_TEMPLATE_OPT( LOOP_END, ADDR_IS_CF);
CF_TEMPLATE_OPT( LOOP_START, ADDR_IS_CF);
CF_TEMPLATE_OPT( LOOP_START_DX10, ADDR_IS_CF);
CF_TEMPLATE_OPT( LOOP_START_NO_AL, ADDR_IS_CF);

CF_TEMPLATE_OPT( POP, ADDR_IS_CF);
CF_TEMPLATE_OPT( PUSH, ADDR_IS_CF);
CF_TEMPLATE( RETURN );

//--------------------------------------------------------------------------
// Export template
//--------------------------------------------------------------------------
#define CF_EXPORT_TEMPLATE( instr ) \
    tuple instr (64): \
    microcode CF_ALLOC_EXPORT_WORD0; \
    microcode CF_ALLOC_EXPORT_WORD1_SWIZ; \
    option RW_GPR_NODEFAULT; \
    option INDEX_GPR_NODEFAULT; \
    \
    constraints: \
      CF_ALLOC_EXPORT_WORD1_SWIZ.CF_INST == CF_INST_ ## instr; \
    end constraints; \
    end tuple \

//--------------------------------------------------------------------------
// Export instructions
//--------------------------------------------------------------------------
CF_EXPORT_TEMPLATE( EXPORT );
CF_EXPORT_TEMPLATE( EXPORT_DONE );

//--------------------------------------------------------------------------
// CF GWS template
//--------------------------------------------------------------------------
#define CF_GWS_TEMPLATE( instr ) \
    tuple instr (64): \
    microcode CF_GWS_WORD0; \
    microcode CF_WORD1; \
    \
    constraints: \
      CF_GWS_WORD0.GWS_OPCODE == instr; \
      CF_WORD1.CF_INST == CF_INST_GLOBAL_WAVE_SYNC; \
    end constraints; \
    end tuple \

//--------------------------------------------------------------------------
// CF GWS instructions
//--------------------------------------------------------------------------
CF_GWS_TEMPLATE( GWS_BARRIER );
CF_GWS_TEMPLATE( GWS_INIT );
CF_GWS_TEMPLATE( GWS_SEMA_P );
CF_GWS_TEMPLATE( GWS_SEMA_V );

//--------------------------------------------------------------------------
// Memory Export instructions
//--------------------------------------------------------------------------
tuple MEM_EXPORT (64):
  microcode CF_ALLOC_EXPORT_WORD0;
  microcode CF_ALLOC_EXPORT_WORD1_BUF;
  option ARRAY_SIZE_MEANS_NOTHING;

  constraints:
    CF_ALLOC_EXPORT_WORD1_BUF.CF_INST == CF_INST_MEM_EXPORT;
  end constraints;
  
end tuple;

tuple MEM_EXPORT_COMBINED (64):
  microcode CF_ALLOC_EXPORT_WORD0;
  microcode CF_ALLOC_EXPORT_WORD1_BUF;

  constraints:
    CF_ALLOC_EXPORT_WORD1_BUF.CF_INST == CF_INST_MEM_EXPORT_COMBINED;
  end constraints;
end tuple;

//--------------------------------------------------------------------------
// Memory RAT template
//--------------------------------------------------------------------------
#define MEM_RAT_TEMPLATE( instr ) \
    tuple instr (64): \
    microcode CF_ALLOC_EXPORT_WORD0_RAT; \
    microcode CF_ALLOC_EXPORT_WORD1_BUF; \
    \
    constraints: \
      CF_ALLOC_EXPORT_WORD1_BUF.CF_INST == CF_INST_ ## instr; \
    end constraints; \
    end tuple

//--------------------------------------------------------------------------
// Memory RAT instructions
//--------------------------------------------------------------------------
MEM_RAT_TEMPLATE( MEM_RAT );
MEM_RAT_TEMPLATE( MEM_RAT_CACHELESS );
MEM_RAT_TEMPLATE( MEM_RAT_COMBINED_CACHELESS );

//--------------------------------------------------------------------------
// Memory template
//--------------------------------------------------------------------------
#define MEM_TEMPLATE( instr ) \
    tuple instr (64): \
    microcode CF_ALLOC_EXPORT_WORD0; \
    microcode CF_ALLOC_EXPORT_WORD1_BUF; \
    \
    constraints: \
      CF_ALLOC_EXPORT_WORD1_BUF.CF_INST == CF_INST_ ## instr; \
    end constraints; \
    end tuple

//--------------------------------------------------------------------------
// Memory instructions
//--------------------------------------------------------------------------
MEM_TEMPLATE( MEM_RING );
MEM_TEMPLATE( MEM_RING1 );
MEM_TEMPLATE( MEM_RING2 );
MEM_TEMPLATE( MEM_RING3 );

MEM_TEMPLATE( MEM_STREAM0_BUF0 );
MEM_TEMPLATE( MEM_STREAM0_BUF1 );
MEM_TEMPLATE( MEM_STREAM0_BUF2 );
MEM_TEMPLATE( MEM_STREAM0_BUF3 );
MEM_TEMPLATE( MEM_STREAM1_BUF0 );
MEM_TEMPLATE( MEM_STREAM1_BUF1 );
MEM_TEMPLATE( MEM_STREAM1_BUF2 );
MEM_TEMPLATE( MEM_STREAM1_BUF3 );
MEM_TEMPLATE( MEM_STREAM2_BUF0 );
MEM_TEMPLATE( MEM_STREAM2_BUF1 );
MEM_TEMPLATE( MEM_STREAM2_BUF2 );
MEM_TEMPLATE( MEM_STREAM2_BUF3 );
MEM_TEMPLATE( MEM_STREAM3_BUF0 );
MEM_TEMPLATE( MEM_STREAM3_BUF1 );
MEM_TEMPLATE( MEM_STREAM3_BUF2 );
MEM_TEMPLATE( MEM_STREAM3_BUF3 );

//--------------------------------------------------------------------------
// Memory scratch instruction
//--------------------------------------------------------------------------
tuple MEM_WR_SCRATCH (64):
  microcode CF_ALLOC_EXPORT_WORD0;
  microcode CF_ALLOC_EXPORT_WORD1_BUF;

  constraints:
    CF_ALLOC_EXPORT_WORD1_BUF.CF_INST == CF_INST_MEM_WR_SCRATCH;
  end constraints;
  
end tuple;

//--------------------------------------------------------------------------
// CF Operations template
//--------------------------------------------------------------------------
#define CF_OP_TEMPLATE( instr ) \
    tuple instr (64): \
    microcode CF_WORD0; \
    microcode CF_WORD1; \
    \
    constraints: \
      CF_WORD1.CF_INST == CF_INST_ ## instr; \
    end constraints; \
    end tuple

//--------------------------------------------------------------------------
// CF Operations instructions
//--------------------------------------------------------------------------
// CF_OP_TEMPLATE( TC );
CF_OP_TEMPLATE( TC_ACK );
// CF_OP_TEMPLATE( VC );
CF_OP_TEMPLATE( VC_ACK );
// CF_OP_TEMPLATE( WAIT_ACK);


//==============================================================================
// ALU Instructions
//==============================================================================

//--------------------------------------------------------------------------
// ALU Operations template
//--------------------------------------------------------------------------
#define ALU_OP_TEMPLATE( instr ) \
    tuple instr (64): \
    microcode ALU_WORD0; \
    microcode ALU_WORD1_OP2; \
    \
    constraints: \
      ALU_WORD1_OP2.ALU_INST == OP2_INST_ ## instr; \
    end constraints; \
    end tuple

#define ALU_OP_TEMPLATE_DST( instr ) \
    tuple instr (64): \
    microcode ALU_WORD0; \
    microcode ALU_WORD1_OP2; \
    option DST_GPR_NODEFAULT; \
    \
    constraints: \
      ALU_WORD1_OP2.ALU_INST == OP2_INST_ ## instr; \
    end constraints; \
    end tuple

#define ALU_OP_TEMPLATE_DST_PREFIXED( instr ) \
    tuple ALU_ ## instr (64): \
    microcode ALU_WORD0; \
    microcode ALU_WORD1_OP2; \
    option DST_GPR_NODEFAULT; \
    \
    constraints: \
      ALU_WORD1_OP2.ALU_INST == OP2_INST_ ## instr; \
    end constraints; \
    end tuple

//--------------------------------------------------------------------------
// ALU Operations instructions
//--------------------------------------------------------------------------
ALU_OP_TEMPLATE_DST( ADD );
ALU_OP_TEMPLATE_DST( ADD_64 );
ALU_OP_TEMPLATE_DST( ADD_INT );
ALU_OP_TEMPLATE_DST( ADD_PREV );
ALU_OP_TEMPLATE_DST( ADDC_UINT );
ALU_OP_TEMPLATE( AND_INT );
ALU_OP_TEMPLATE( ASHR_INT );
ALU_OP_TEMPLATE_DST( BCNT_ACCUM_PREV_INT);
ALU_OP_TEMPLATE_DST( BCNT_INT );
ALU_OP_TEMPLATE_DST( BFM_INT );
ALU_OP_TEMPLATE_DST( BFREV_INT );
ALU_OP_TEMPLATE_DST( CEIL );
ALU_OP_TEMPLATE_DST( COS );
ALU_OP_TEMPLATE_DST( CUBE );
ALU_OP_TEMPLATE_DST( DOT );
ALU_OP_TEMPLATE_DST( DOT_IEEE );
ALU_OP_TEMPLATE_DST( DOT4 );
ALU_OP_TEMPLATE_DST( DOT4_IEEE );
ALU_OP_TEMPLATE_DST( EXP_IEEE );
ALU_OP_TEMPLATE_DST( FFBH_INT );
ALU_OP_TEMPLATE_DST( FFBH_UINT );
ALU_OP_TEMPLATE_DST( FFBL_INT );
ALU_OP_TEMPLATE_DST( FLOOR );
ALU_OP_TEMPLATE_DST( FLT_TO_INT );
ALU_OP_TEMPLATE_DST( FLT_TO_INT_FLOOR );
ALU_OP_TEMPLATE_DST( FLT_TO_INT_RPI );
ALU_OP_TEMPLATE_DST( FLT_TO_UINT );
ALU_OP_TEMPLATE_DST( FLT_TO_UINT4 );
ALU_OP_TEMPLATE_DST( FLT16_TO_FLT32 );
ALU_OP_TEMPLATE_DST( FLT32_TO_FLT16 );
ALU_OP_TEMPLATE_DST( FRACT );
ALU_OP_TEMPLATE_DST( FRACT_64 );
ALU_OP_TEMPLATE_DST( FREXP_64 );

tuple GROUP_BARRIER(64):
  microcode ALU_WORD0;
  microcode ALU_WORD1_OP2;
  option SRC0_SEL_MEANS_NOTHING;
  option SRC1_SEL_MEANS_NOTHING;
  option BANK_SWIZZLE_MEANS_NOTHING;
  option DST_CHAN_MEANS_NOTHING;
  option SRC0_CHAN_MEANS_NOTHING;
  option SRC1_CHAN_MEANS_NOTHING;
  
  constraints:
    ALU_WORD1_OP2.ALU_INST == OP2_INST_GROUP_BARRIER;
  end constraints;
end tuple;

ALU_OP_TEMPLATE( GROUP_SEQ_BEGIN );
ALU_OP_TEMPLATE( GROUP_SEQ_END );
ALU_OP_TEMPLATE_DST( INT_TO_FLT );
ALU_OP_TEMPLATE_DST( INTERP_LOAD_P0 );
ALU_OP_TEMPLATE_DST( INTERP_LOAD_P10 );
ALU_OP_TEMPLATE_DST( INTERP_LOAD_P20 );
ALU_OP_TEMPLATE_DST( INTERP_X );
ALU_OP_TEMPLATE_DST( INTERP_XY );
ALU_OP_TEMPLATE_DST( INTERP_Z );
ALU_OP_TEMPLATE_DST( INTERP_ZW );
ALU_OP_TEMPLATE( KILLE );
ALU_OP_TEMPLATE( KILLE_INT );
ALU_OP_TEMPLATE( KILLGE );
ALU_OP_TEMPLATE( KILLGE_INT );
ALU_OP_TEMPLATE( KILLGE_UINT );
ALU_OP_TEMPLATE( KILLGT );
ALU_OP_TEMPLATE( KILLGT_INT );
ALU_OP_TEMPLATE( KILLGT_UINT );
ALU_OP_TEMPLATE( KILLNE );
ALU_OP_TEMPLATE( KILLNE_INT );
ALU_OP_TEMPLATE_DST( LDEXP_64 );
ALU_OP_TEMPLATE_DST( LOAD_STORE_FLAGS );
ALU_OP_TEMPLATE_DST( LOG_CLAMPED );
ALU_OP_TEMPLATE_DST( LOG_IEEE );
ALU_OP_TEMPLATE_DST( LSHL_INT );
ALU_OP_TEMPLATE_DST( LSHR_INT );
ALU_OP_TEMPLATE_DST( MAX );
ALU_OP_TEMPLATE_DST( MAX_64 );
ALU_OP_TEMPLATE_DST( MAX_DX10 );
ALU_OP_TEMPLATE_DST( MAX_INT );
ALU_OP_TEMPLATE_DST( MAX_UINT );
ALU_OP_TEMPLATE_DST( MAX4 );
ALU_OP_TEMPLATE_DST( MBCNT_32HI_INT );
ALU_OP_TEMPLATE_DST( MBCNT_32LO_ACCUM_PREV_INT );
ALU_OP_TEMPLATE_DST( MIN );
ALU_OP_TEMPLATE_DST( MIN_64 );
ALU_OP_TEMPLATE_DST( MIN_DX10 );
ALU_OP_TEMPLATE_DST( MIN_INT );
ALU_OP_TEMPLATE_DST( MIN_UINT );
ALU_OP_TEMPLATE_DST( MOV );
ALU_OP_TEMPLATE_DST( MOVA_INT );
ALU_OP_TEMPLATE_DST( MUL );
ALU_OP_TEMPLATE_DST( MUL_IEEE );
ALU_OP_TEMPLATE_DST( MUL_IEEE_PREV );
ALU_OP_TEMPLATE_DST( MUL_PREV );
ALU_OP_TEMPLATE_DST( MUL_UINT24 );
ALU_OP_TEMPLATE_DST( MULADD_IEEE_PREV );
ALU_OP_TEMPLATE_DST( MULADD_PREV );
ALU_OP_TEMPLATE_DST( MULHI_INT );
ALU_OP_TEMPLATE_DST( MULHI_UINT );
ALU_OP_TEMPLATE_DST( MULHI_UINT24 );
ALU_OP_TEMPLATE_DST( MULLO_INT );
ALU_OP_TEMPLATE_DST( MULLO_UINT );
ALU_OP_TEMPLATE_DST_PREFIXED( NOP );
ALU_OP_TEMPLATE_DST( NOT_INT );
ALU_OP_TEMPLATE_DST( OFFSET_TO_FLT );
ALU_OP_TEMPLATE_DST( OR_INT );
ALU_OP_TEMPLATE( PRED_SET_CLR );
ALU_OP_TEMPLATE( PRED_SET_INV );
ALU_OP_TEMPLATE( PRED_SET_POP );
ALU_OP_TEMPLATE( PRED_SET_RESTORE );
ALU_OP_TEMPLATE( PRED_SETE );
ALU_OP_TEMPLATE( PRED_SETE_64 );
ALU_OP_TEMPLATE( PREDE_INT );
ALU_OP_TEMPLATE( PRED_SETE_PUSH );
ALU_OP_TEMPLATE( PRED_SETE_PUSH_INT );
ALU_OP_TEMPLATE( PRED_SETGE );
ALU_OP_TEMPLATE( PRED_SETGE_64 );
ALU_OP_TEMPLATE( PRED_SETGE_INT );
ALU_OP_TEMPLATE( PRED_SETGE_PUSH );
ALU_OP_TEMPLATE( PRED_SETGE_PUSH_INT);
ALU_OP_TEMPLATE( PRED_SETGE_UINT );
ALU_OP_TEMPLATE( PRED_SETGT );
ALU_OP_TEMPLATE( PRED_SETGT_64 );
ALU_OP_TEMPLATE( PRED_SETGT_INT );
ALU_OP_TEMPLATE( PRED_SETGT_PUSH );
ALU_OP_TEMPLATE( PRED_SETGT_PUSH_INT);
ALU_OP_TEMPLATE( PRED_SETGT_UINT );
ALU_OP_TEMPLATE( PRED_SETLE_PUSH_INT);
ALU_OP_TEMPLATE( PRED_SETLT_PUSH_INT);
ALU_OP_TEMPLATE( PRED_SETNE );
ALU_OP_TEMPLATE( PRED_SETNE_INT );
ALU_OP_TEMPLATE( PRED_SETNE_PUSH );
ALU_OP_TEMPLATE( PRED_SETNE_PUSH_INT);
ALU_OP_TEMPLATE_DST( RECIP_64 );
ALU_OP_TEMPLATE_DST( RECIP_CLAMPED );
ALU_OP_TEMPLATE_DST( RECIP_CLAMPED_64 );
ALU_OP_TEMPLATE_DST( RECIP_FF );
ALU_OP_TEMPLATE_DST( RECIP_IEEE );
ALU_OP_TEMPLATE_DST( RECIP_INT );
ALU_OP_TEMPLATE_DST( RECIP_UINT );
ALU_OP_TEMPLATE_DST( RECIPSQRT_64 );
ALU_OP_TEMPLATE_DST( RECIPSQRT_CLAMPED );
ALU_OP_TEMPLATE_DST( RECIPSQRT_CLAMPED_64 );
ALU_OP_TEMPLATE_DST( RECIPSQRT_FF );
ALU_OP_TEMPLATE_DST( RECIPSQRT_IEEE );
ALU_OP_TEMPLATE_DST( RNDNE );
ALU_OP_TEMPLATE_DST( SAD_ACCUM_PREV_UINT);
ALU_OP_TEMPLATE_DST( SET_CF_IDX0 );
ALU_OP_TEMPLATE_DST( SET_CF_IDX1 );
ALU_OP_TEMPLATE_DST( SET_LDS_SIZE );
ALU_OP_TEMPLATE_DST( SET_MODE );
ALU_OP_TEMPLATE_DST( SETE );
ALU_OP_TEMPLATE_DST( SETE_64 );
ALU_OP_TEMPLATE_DST( SETE_DX10 );
ALU_OP_TEMPLATE_DST( SETE_INT );
ALU_OP_TEMPLATE_DST( SETGE );
ALU_OP_TEMPLATE_DST( SETGE_64 );
ALU_OP_TEMPLATE_DST( SETGE_DX10 );
ALU_OP_TEMPLATE_DST( SETGE_INT );
ALU_OP_TEMPLATE_DST( SETGE_UINT );
ALU_OP_TEMPLATE_DST( SETGT );
ALU_OP_TEMPLATE_DST( SETGT_64 );
ALU_OP_TEMPLATE_DST( SETGT_DX10 );
ALU_OP_TEMPLATE_DST( SETGT_INT );
ALU_OP_TEMPLATE_DST( SETGT_UINT );
ALU_OP_TEMPLATE_DST( SETNE );
ALU_OP_TEMPLATE_DST( SETNE_64 );
ALU_OP_TEMPLATE_DST( SETNE_DX10 );
ALU_OP_TEMPLATE_DST( SETNE_INT );
ALU_OP_TEMPLATE_DST( SIN );
ALU_OP_TEMPLATE_DST( SQRT_64 );
ALU_OP_TEMPLATE_DST( SQRT_IEEE );
ALU_OP_TEMPLATE_DST( STORE_FLAGS );
ALU_OP_TEMPLATE_DST( SUB_INT );
ALU_OP_TEMPLATE_DST( SUBB_UINT );
ALU_OP_TEMPLATE_DST( TRUNC );
ALU_OP_TEMPLATE_DST( UBYTE0_FLT );
ALU_OP_TEMPLATE_DST( UBYTE1_FLT );
ALU_OP_TEMPLATE_DST( UBYTE2_FLT );
ALU_OP_TEMPLATE_DST( UBYTE3_FLT );
ALU_OP_TEMPLATE_DST( UINT_TO_FLT );
ALU_OP_TEMPLATE_DST( XOR_INT );


//--------------------------------------------------------------------------
// More ALU Operations template
//--------------------------------------------------------------------------
#define ALU_MORE_OP_TEMPLATE( instr) \
    tuple instr (64): \
    microcode ALU_WORD0; \
    microcode ALU_WORD1_OP2; \
    \
    constraints: \
      ALU_WORD1_OP2.ALU_INST == OP2_INST_ ## instr; \
    end constraints; \
    end tuple

//--------------------------------------------------------------------------
// More ALU Operations instructions
//--------------------------------------------------------------------------
ALU_MORE_OP_TEMPLATE( FLT32_TO_FLT64_S);
ALU_MORE_OP_TEMPLATE( FLT32_TO_FLT64_V);
ALU_MORE_OP_TEMPLATE( FLT64_TO_FLT32_S);
ALU_MORE_OP_TEMPLATE( FLT64_TO_FLT32_V);
ALU_MORE_OP_TEMPLATE( MUL_64_S);
ALU_MORE_OP_TEMPLATE( MUL_64_V);

//--------------------------------------------------------------------------
// ALU Operations 3 template
//--------------------------------------------------------------------------
#define ALU_OP3_TEMPLATE( instr ) \
    tuple instr (64): \
    microcode ALU_WORD0; \
    microcode ALU_WORD1_OP3; \
    \
    constraints: \
      ALU_WORD1_OP3.ALU_INST == OP3_INST_ ## instr; \
    end constraints; \
    end tuple

//--------------------------------------------------------------------------
// ALU Operations 3 instructions
//--------------------------------------------------------------------------
ALU_OP3_TEMPLATE( BFE_INT );
ALU_OP3_TEMPLATE( BFE_UINT );
ALU_OP3_TEMPLATE( BFI_INT );
ALU_OP3_TEMPLATE( BIT_ALIGN_INT );
ALU_OP3_TEMPLATE( BYTE_ALIGN_INT );
ALU_OP3_TEMPLATE( CNDE );
ALU_OP3_TEMPLATE( CNDE_INT );
ALU_OP3_TEMPLATE( CNDGE );
ALU_OP3_TEMPLATE( CNDGE_INT );
ALU_OP3_TEMPLATE( CNDGT );
ALU_OP3_TEMPLATE( CNDGT_INT );
ALU_OP3_TEMPLATE( CNDNE_64 );
ALU_OP3_TEMPLATE( FMA );
ALU_OP3_TEMPLATE( FMA_64 );
ALU_OP3_TEMPLATE( LERP_UINT );
ALU_OP3_TEMPLATE( MUL_LIT );
ALU_OP3_TEMPLATE( MULADD );
ALU_OP3_TEMPLATE( MULADD_D2 );
ALU_OP3_TEMPLATE( MULADD_IEEE );
ALU_OP3_TEMPLATE( MULADD_M2 );
ALU_OP3_TEMPLATE( MULADD_M4 );
ALU_OP3_TEMPLATE( MULADD_UINT24 );
ALU_OP3_TEMPLATE( SAD_ACCUM_HI_UINT );
ALU_OP3_TEMPLATE( SAD_ACCUM_UINT );


//==============================================================================
// Instructions for Fetches Through a Vertex Cache Clause
//==============================================================================

//--------------------------------------------------------------------------
// FTVCC template
//--------------------------------------------------------------------------
#define FTVCC_TEMPLATE( instr ) \
    tuple instr (128): \
    microcode VTX_WORD0; \
    microcode VTX_WORD1_GPR; \
    microcode VTX_WORD2; \
    microcode padding_32; \
    option SRC_GPR_NODEFAULT; \
    option DST_GPR_NODEFAULT; \
    \
    constraints: \
      VTX_WORD0.VC_INST == VC_INST_ ## instr; \
    end constraints; \
    end tuple

//--------------------------------------------------------------------------
// FTVCC instructions
//--------------------------------------------------------------------------
FTVCC_TEMPLATE( FETCH );
FTVCC_TEMPLATE( GET_BUFFER_RESINFO );

tuple SEMANTIC (128):
  microcode VTX_WORD0;
  microcode VTX_WORD1_SEM;
  microcode VTX_WORD2;
  microcode padding_32;
  option SRC_GPR_NODEFAULT;
  option SEMANTIC_ID_NODEFAULT;

  constraints:
    VTX_WORD0.VC_INST == VC_INST_SEMANTIC;
  end constraints;
end tuple;


//==============================================================================
// Instructions for Fetches Through a Texture Cache Clause
//==============================================================================

//--------------------------------------------------------------------------
// FTTCC template
//--------------------------------------------------------------------------
#define FTTCC_TEMPLATE( instr ) \
    tuple instr (128): \
    microcode TEX_WORD0; \
    microcode TEX_WORD1; \
    microcode TEX_WORD2; \
    microcode padding_32; \
    option SRC_GPR_NODEFAULT; \
    \
    constraints: \
      TEX_WORD0.TEX_INST == TEX_INST_ ## instr; \
    end constraints; \
    end tuple

//--------------------------------------------------------------------------
// FTVCC instructions
//--------------------------------------------------------------------------
FTTCC_TEMPLATE( GATHER4 );
FTTCC_TEMPLATE( GATHER4_C );
FTTCC_TEMPLATE( GATHER4_C_O );
FTTCC_TEMPLATE( GATHER4_O );
FTTCC_TEMPLATE( GET_GRADIENTS_H );
FTTCC_TEMPLATE( GET_GRADIENTS_V );
FTTCC_TEMPLATE( GET_COMP_TEX_LOD );
FTTCC_TEMPLATE( GET_NUMBER_OF_SAMPLES );
FTTCC_TEMPLATE( GET_TEXTURE_RESINFO );
FTTCC_TEMPLATE( KEEP_GRADIENTS );
FTTCC_TEMPLATE( LD );
FTTCC_TEMPLATE( SAMPLE );
FTTCC_TEMPLATE( SAMPLE_C );
FTTCC_TEMPLATE( SAMPLE_C_G );
FTTCC_TEMPLATE( SAMPLE_C_G_LB );
FTTCC_TEMPLATE( SAMPLE_C_L );
FTTCC_TEMPLATE( SAMPLE_C_LB );
FTTCC_TEMPLATE( SAMPLE_C_LZ );
FTTCC_TEMPLATE( SAMPLE_G );
FTTCC_TEMPLATE( SAMPLE_G_LB );
FTTCC_TEMPLATE( SAMPLE_L );
FTTCC_TEMPLATE( SAMPLE_LB );
FTTCC_TEMPLATE( SAMPLE_LZ );
FTTCC_TEMPLATE( SET_GRADIENTS_H );
FTTCC_TEMPLATE( SET_GRADIENTS_V );

//--------------------------------------------------------------------------
// FTTCC64 template
//--------------------------------------------------------------------------
#define FTTCC64_TEMPLATE( instr ) \
    tuple instr (64): \
    microcode TEX_WORD0; \
    microcode TEX_WORD1; \
    option SRC_GPR_NODEFAULT; \
    \
    constraints: \
      TEX_WORD0.TEX_INST == TEX_INST_ ## instr; \
    end constraints; \
    end tuple

//--------------------------------------------------------------------------
// FTVCC instruction
//--------------------------------------------------------------------------
FTTCC64_TEMPLATE( SET_TEXTURE_OFFSETS );


//==============================================================================
// Memory related Instructions
//==============================================================================

//--------------------------------------------------------------------------
// MEM Read template
//--------------------------------------------------------------------------
#define MEM_RD_TEMPLATE( instr ) \
    tuple instr (128): \
    microcode TMEM_RD_WORD0; \
    microcode TMEM_RD_WORD1; \
    microcode TMEM_RD_WORD2; \
    microcode padding_32; \
    option DST_GPR_NODEFAULT; \
    \
    constraints: \
      TMEM_RD_WORD0.VC_INST == VC_INST_MEM;\
      TMEM_RD_WORD0.MEM_OP  == instr; \
    end constraints; \
    end tuple

//--------------------------------------------------------------------------
// MEM Read instructions
//--------------------------------------------------------------------------
MEM_RD_TEMPLATE( MEM_RD_SCATTER );
MEM_RD_TEMPLATE( MEM_RD_SCRATCH );

//--------------------------------------------------------------------------
// MEM GDS template
//--------------------------------------------------------------------------
#define MEM_GDS_TEMPLATE( instr ) \
    tuple instr (128): \
    microcode MEM_GDS_WORD0; \
    microcode MEM_GDS_WORD1; \
    microcode MEM_GDS_WORD2; \
    microcode padding_32; \
    \
    constraints: \
      MEM_GDS_WORD0.MEM_INST == MEM_INST_MEM; \
      MEM_GDS_WORD0.MEM_OP   == instr; \
    end constraints; \
    end tuple

//--------------------------------------------------------------------------
// MEM GDS instructions
//--------------------------------------------------------------------------
MEM_GDS_TEMPLATE( MEM_GDS_UNI );
MEM_GDS_TEMPLATE( MEM_TF_WRITE );

//--------------------------------------------------------------------------
// MEM LDS template
//--------------------------------------------------------------------------
#define MEM_LDS_TEMPLATE( instr ) \
    tuple LDS_ ## instr (64): \
    microcode ALU_WORD0; \
    microcode ALU_WORD1_LDS_IDX_OP; \
    \
    constraints: \
      ALU_WORD1_LDS_IDX_OP.ALU_INST == OP3_INST_LDS_IDX_OP; \
      ALU_WORD1_LDS_IDX_OP.LDS_OP   == DS_INST_ ## instr; \
    end constraints; \
    end tuple

//--------------------------------------------------------------------------
// MEM LDS instructions
//--------------------------------------------------------------------------
MEM_LDS_TEMPLATE( ADD );
MEM_LDS_TEMPLATE( ADD_RET );
MEM_LDS_TEMPLATE( AND );
MEM_LDS_TEMPLATE( AND_RET );
MEM_LDS_TEMPLATE( ATOMIC_ORDERED_ALLOC_RET );
MEM_LDS_TEMPLATE( BYTE_READ_RET );
MEM_LDS_TEMPLATE( BYTE_WRITE );
MEM_LDS_TEMPLATE( CMP_STORE );
MEM_LDS_TEMPLATE( CMP_STORE_SPF );
MEM_LDS_TEMPLATE( CMP_XCHG_RET );
MEM_LDS_TEMPLATE( CMP_XCHG_SPF_RET );
MEM_LDS_TEMPLATE( DEC );
MEM_LDS_TEMPLATE( DEC_RET );
MEM_LDS_TEMPLATE( INC );
MEM_LDS_TEMPLATE( INC_RET );
MEM_LDS_TEMPLATE( MAX_INT );
MEM_LDS_TEMPLATE( MAX_INT_RET );
MEM_LDS_TEMPLATE( MAX_UINT );
MEM_LDS_TEMPLATE( MAX_UINT_RET );
MEM_LDS_TEMPLATE( MIN_INT );
MEM_LDS_TEMPLATE( MIN_INT_RET );
MEM_LDS_TEMPLATE( MIN_UINT );
MEM_LDS_TEMPLATE( MIN_UINT_RET );
MEM_LDS_TEMPLATE( MSKOR );
MEM_LDS_TEMPLATE( MSKOR_RET );
MEM_LDS_TEMPLATE( OR );
MEM_LDS_TEMPLATE( OR_RET );
MEM_LDS_TEMPLATE( READ_REL_RET );
MEM_LDS_TEMPLATE( READ_RET );
MEM_LDS_TEMPLATE( READ2_RET );
MEM_LDS_TEMPLATE( READWRITE_RET );
MEM_LDS_TEMPLATE( RSUB );
MEM_LDS_TEMPLATE( RSUB_RET );
MEM_LDS_TEMPLATE( SHORT_READ_RET );
MEM_LDS_TEMPLATE( SHORT_WRITE );
MEM_LDS_TEMPLATE( SUB );
MEM_LDS_TEMPLATE( SUB_RET );
MEM_LDS_TEMPLATE( UBYTE_READ_RET );
MEM_LDS_TEMPLATE( USHORT_READ_RET );
MEM_LDS_TEMPLATE( WRITE );
MEM_LDS_TEMPLATE( WRITE_REL );
MEM_LDS_TEMPLATE( WRITE2 );
MEM_LDS_TEMPLATE( XCHG_REL_RET );
MEM_LDS_TEMPLATE( XCHG_RET );
MEM_LDS_TEMPLATE( XCHG2_RET );
MEM_LDS_TEMPLATE( XOR );
MEM_LDS_TEMPLATE( XOR_RET );


//==============================================================================
// 
//==============================================================================

#define ALU_INST_OP2_TEMPLATE(instr) \
    tuple instr (64): \
    microcode ALU_WORD0; \
    microcode ALU_WORD1_OP2; \
    constraints: \
      ALU_WORD1_OP2.ALU_INST == OP2_INST_ ## instr; \
    end constraints; \
    end tuple

#define CF_INST_TEMPLATE_OPT(instr, opt) \
    tuple instr (64): \
    microcode CF_WORD0; \
    microcode CF_WORD1; \
    option JUMPTABLE_SE_MEANS_NOTHING; \
    option opt ; \
    constraints: \
      CF_WORD1.CF_INST == CF_INST_ ## instr; \
    end constraints; \
    end tuple

//  ALU_INST_OP2_TEMPLATE(ADD_INT);
//  ALU_INST_OP2_TEMPLATE(LSHR_INT);
//  ALU_INST_OP2_TEMPLATE(LSHL_INT);
//  ALU_INST_OP2_TEMPLATE(ASHR_INT);
//  ALU_INST_OP2_TEMPLATE(AND_INT);


CF_INST_TEMPLATE_OPT(TC, ADDR_IS_TEX);
CF_INST_TEMPLATE_OPT(VC, ADDR_IS_VTX);
CF_INST_TEMPLATE_OPT(WAIT_ACK, ADDR_MEANS_COUNT);

tuple NOP(64):
  microcode CF_WORD0;
  microcode CF_WORD1;
  option JUMPTABLE_SE_MEANS_NOTHING;
  option COND_MEANS_NOTHING;
  constraints:
    CF_WORD1.CF_INST == CF_INST_NOP;
  end constraints;
end tuple;

end;
