architecture R800 Evergreen;

	microcode ALU_WORD0(32):
		enum(9) SRC_REG:
			GPR 127:0;
			Kcache_bank0 159:128;
			Kcache_bank1 191:160;
			unnamed_inline_const 218:192;
			Kcache_bank2 287:256;
			Kcache_bank3 319:288;
			ALU_SRC_LDS_OQ_A 219;
			ALU_SRC_HW_WAVE_ID 231; 
			ALU_SRC_SIMD_ID 232;
			/* ... */
			ALU_SRC_LITERAL 253;
		end enum;

		enum(2) CHAN_SEL:
			CHAN_X;
			CHAN_Y;
			CHAN_Z;
			CHAN_W;
		end enum;
		
		enum(6) INDEX_MODE:
			INDEX_AR_X 0 default;
			INDEX_LOOP 4;
			INDEX_GLOBAL 5;
			INDEX_GLOBAL_AR_X 6;
		end enum;
		
		enum(2) PRED_SEL:
			PRED_SEL_OFF 0 default;
			PRED_SEL_ZERO 2;
			PRED_SEL_ONE 3;
		end enum;
		
		field SRC0_SEL(8:0) SRC_REG;
		field SRC1_SEL(21:13) SRC_REG;
		field SRC0_REL(9) BOOL;
		field SRC1_REL(22) BOOL;
		field SRC0_CHAN(11:10) CHAN_SEL;
		field SRC1_CHAN(24:23) CHAN_SEL;
		field SRC0_NEG(12) BOOL;
		field SRC1_NEG(25) BOOL;
		field INDEX_MODE(28:26) INDEX_MODE;
		field PRED_SEL(30:29) PRED_SEL;
		field LAST(31) BOOL;
	end microcode;

	microcode ALU_WORD1_OP2(32):
		enum(2) OMOD:
			ALU_OMOD_OFF default;
			ALU_OMOD_M2;
			ALU_OMOD_M4;
			ALU_OMOD_D2;
		end enum;
		
		enum(11) ALU_INST:
			OP2_INST_LSHR_INT 22;
			OP2_INST_ADD_INT 52;
			OP2_INST_GROUP_BARRIER 84;
		end enum;
		
		enum(2) CHAN_SEL:
			CHAN_X;
			CHAN_Y;
			CHAN_Z;
			CHAN_W;
		end enum;
		
		field SRC0_ABS(0) BOOL;
		field SRC1_ABS(1) BOOL;
		field UPDATE_EXEC_MASK(2) BOOL;
		field UPDATE_PRED(3) BOOL;
		field WRITE_MASK(4) BOOL;
		field OMOD(6:5) OMOD;
		field ALU_INST(17:7) ALU_INST;
		//TODO!
		field DST_GPR(27:21) INT;
		field DST_REL(28) BOOL;
		field DST_CHAN(30:29) CHAN_SEL;
		//TODO!
	end microcode;
	
	microcode padding_32(32):
	end microcode;

	microcode MEM_RD_WORD0(32):
		enum(3) MEM_OP:
			MEM_RD_SCRATCH 0;
			MEM_RD_SCATTER 2;
		end enum;
		
		enum(5) VC_INST:
			VC_INST_MEM 2;
		end enum;
		
		enum(2) SRC_SEL_X:
			SEL_X;
			SEL_Y;
			SEL_Z;
			SEL_W;
		end enum;
		
		field VC_INST(4:0) VC_INST; 
		field MEM_OP(10:8) MEM_OP;
		field ELEM_SIZE(6:5) INT;
		field FETCH_WHOLE_QUAD(7) BOOL;
		/*...*/
		field SRC_SEL_X(25:24) SRC_SEL_X;
		/* TODO */
	end microcode;

	microcode MEM_RD_WORD1(32):
		/* TODO */
	end microcode;

	microcode MEM_RD_WORD2(32):
		/* TODO */
	end microcode;

	microcode LITERAL_CONSTANT_32(32):
	 /*handled internally*/
	end microcode;
	
	microcode CF_WORD0(32):
		enum(3) JUMPTABLE_SE:
			CF_JUMPTABLE_SEL_CONST_A;
			CF_JUMPTABLE_SEL_CONST_B;
			CF_JUMPTABLE_SEL_CONST_C;
			CF_JUMPTABLE_SEL_CONST_D;
			CF_JUMPTABLE_SEL_INDEX_0;
			CF_JUMPTABLE_SEL_INDEX_1;
		end enum;
		
		field ADDR(23:0) INT;
		field JUMPTABLE_SE(26:24) JUMPTABLE_SE;
		field Reserved(31:27) INT;
	end microcode;
	
	microcode CF_WORD1(32):
		enum(2) COND:
			CF_COND_ACTIVE;
			CF_COND_FALSE;
			CF_COND_BOOL;
			CF_COND_NOT_BOOL;
		end enum;
		
		enum(8) CF_INST:
			CF_INST_NOP 0;
			CF_INST_TC 1;
			CF_INST_VC 2;
			CF_INST_GDS 3;
			CF_INST_LOOP_START 4;
			CF_INST_LOOP_END 5;
			CF_INST_LOOP_START_DX10 6;
			CF_INST_LOOP_START_NO_AL 7;
			CF_INST_LOOP_CONTINUE 8;
			CF_INST_LOOP_BREAK 9;
			CF_INST_JUMP 10;
			CF_INST_PUSH 11;
			(*reserved 12*)
			CF_INST_ELSE 13;
			CF_INST_POP 14;
			(*reservec 17:15*)
			CF_INST_CALL 18;
			CF_INST_CALL_FS 19;
			CF_INST_RETURN 20;
			CF_INST_EMIT_VERTEX 21;
			CF_INST_EMIT_CUT_VERTEX 22;
			CF_INST_CUT_VERTEX 23;
			CF_INST_KILL 24;
			(*reserved 25*)
			CF_INST_WAIT_ACK 26;
			CF_INST_TC_ACK 27;
			CF_INST_VC_ACK 28;
			CF_INST_JUMPTABLE 29;
			CF_INST_GLOBAL_WAVE_SYNC 30;
			CF_INST_HALT 31;
		end enum;
		
		field POP_COUNT(2:0) INT;
		field CF_CONST(7:3) INT;
		field COND(9:8) COND;
		field COUNT(15:10) INT;
		field Reserved(19:16) INT;
		field VALIX_PIXEL_MODE(20) BOOL;
		field END_OF_PROGRAM(21) BOOL;
		field CF_INST(29:22) CF_INST;
		field WHOLE_QUAD_MODE(30) BOOL;
		field BARRIER(31) BOOL;
	end microcode;
	
	microcode CF_ALU_WORD0(32):
		enum(2) CACHE_MODE:
			CF_KCACHE_NOP 0 default;
			CF_KCACHE_LOCK_1 1;
			CF_KCACHE_LOCK_2 2;
			CF_KCACHE_LOCK_LOOP_INDEX 3;
		end enum;
		
		field ADDR(21:0) INT;
		field KCACHE_BANK0(25:22) INT;
		field KCACHE_BANK1(29:26) INT;
		field KCACHE_MODE0(31:30) CACHE_MODE;
	end microcode;
	
	microcode CF_ALU_WORD1(32):
		enum(2) CACHE_MODE:
			CF_KCACHE_NOP 0 default;
			CF_KCACHE_LOCK_1 1;
			CF_KCACHE_LOCK_2 2;
			CF_KCACHE_LOCK_LOOP_INDEX 3;
		end enum;
		
		enum(4) CF_INST:
			CF_INST_ALU 8;
			CF_INST_ALU_PUSH_BEFORE 9;
			CF_INST_ALU_POP_AFTER 10;
			CF_INST_ALU_POP2_AFTER 11;
			CF_INST_ALU_EXTENDED 12;
			CF_INST_ALU_CONTINUE 13;
			CF_INST_ALU_BREAK 14;
			CF_INST_ALU_ELSE_AFTER 15;
		end enum;
		
		field KCACHE_MODE1(1:0) CACHE_MODE;
		field KCACHE_ADDR0(9:2) INT;
		field KCACHE_ADDR1(17:10) INT;
		field COUNT(24:18) INT;
		field ALT_CONST(25) BOOL;
		field CF_INST(29:26) CF_INST;
		field WHOLE_QUAD_MODE(30) BOOL;
		field BARRIER(31) BOOL;
	end microcode;
	
	
	microcode CF_ALLOC_EXPORT_WORD0_RAT(32):
		enum(6) RAT_INST:
			EXPORT_RAT_INST_NOP 0;
			EXPORT_RAT_INST_STORE_TYPED 1;
			EXPORT_RAT_INST_STORE_RAW 2;
			EXPORT_RAT_INST_STORE_RAW_FDENORM 3;
			EXPORT_RAT_INST_CMPXCHG_INT 4;
			EXPORT_RAT_INST_CMPXCHG_FLT 5;
			EXPORT_RAT_INST_CMPXCHG_FDENORM 6;
			EXPORT_RAT_INST_ADD 7;
			EXPORT_RAT_INST_SUB 8;
			EXPORT_RAT_INST_RSUB 9;
			EXPORT_RAT_INST_MIN_INT 10;
			EXPORT_RAT_INST_MIN_UINT 11;
			EXPORT_RAT_INST_MAX_INT 12;
			EXPORT_RAT_INST_MAX_UINT 13;
			EXPORT_RAT_INST_AND 14;
			EXPORT_RAT_INST_OR 15;
			(*TODO...*)
		end enum;
		
		enum(2) RAT_INDEX_MO:
			CF_INDEX_NONE;
			CF_INDEX_0;
			CF_INDEX_1;
			CF_INVALID;
		end enum;
		
		
		field RAT_ID(3:0) INT;
		field RAT_INST(9:4) RAT_INST;
		field RAT_INDEX_MO(12:11) RAT_INDEX_MO;
		field TYPE(14:13) INT; /*should be enum but it's meaning depends on others*/
		field RW_GPR(21:15) INT;
		field RW_REL(22) BOOL;
		field INDEX_GPR(29:23) INT;
		field ELEM_SIZE(31:30) INT;
	end microcode;
	
	microcode CF_ALLOC_EXPORT_WORD1_BUF(32):
		enum(8) CF_INST:
			CF_INST_MEM_WR_SCRATCH 80;
			CF_INST_MEM_RAT 86;
			CF_INST_MEM_RAT_CACHELESS 87;
		end enum;
	
		field ARRAY_SIZE(11:0) INT;
		field COMP_MASK(15:12) INT;
		field BURST_COUNT(19:16) INT;
		field VALID_PIXEL_MODE(20) BOOL;
		field END_OF_PROGRAM(21) BOOL;
		field CF_INST(29:22) CF_INST;
		field MARK(30) BOOL;
		field BARRIER(31) BOOL;
	end microcode;

	microcode VTX_WORD0(32):
		enum(5) VC_INST:
			VC_INST_FETCH 0;
			VC_INST_SEMANTIC 1;
			VC_INST_GET_BUFFER_RESINFO 14;
		end enum;
		
		enum(2) FETCH_TYPE:
			VTX_FETCH_VERTEX_DATA 0;
			VTX_FETCH_INSTANCE_DATA 1;
			VTX_FETCH_NO_INDEX_OFFSET 2;
		end enum;
		
		enum(2) CHAN_SEL:
			SEL_X;
			SEL_Y;
			SEL_Z;
			SEL_W;
		end enum;
		
		field VC_INST(4:0) VC_INST;
		field FETCH_TYPE(6:5) FETCH_TYPE;
		field FETCH_WHOLE_QUAD(7) BOOL;
		field BUFFER_ID(15:8) INT;
		field SRC_GPR(22:16) INT;
		field SRC_REL(23) BOOL;
		field SRC_SEL_X(25:24) CHAN_SEL;
		field MEGA_FETCH_COUNT(31:26) INT;
	end microcode;
	
	microcode VTX_WORD1_GPR(32):
		enum(3) CHAN_SEL:
			SEL_X 0;
			SEL_Y 1;
			SEL_Z 2;
			SEL_W 3;
			SEL_0 4;
			SEL_1 5;
			SEL_MASK 7;
		end enum;
	
		enum(2) NUM_FORMAT_ALL:
			NUM_FORMAT_NORM 0;
			NUM_FORMAT_INT 1;
			NUM_FORMAT_SCALED 2;
		end enum;
		
		enum(1) FORMAT_COMP_ALL:
			FORMAT_COMP_UNSIGNED 0 default;
			FORMAT_COMP_SIGNED 1;
		end enum;
		
		enum(1) SRF_MODE_ALL:
			SRF_MODE_ZERO_CLAMP_MINUS_ONE 0 default;
			SRF_MODE_NO_ZERO 1;
		end enum;
		
		field DST_GRP(6:0) INT;
		field DST_REL(7) BOOL;
		field DST_SEL_X(11:9) CHAN_SEL;
		field DST_SEL_Y(14:12) CHAN_SEL;
		field DST_SEL_Z(17:15) CHAN_SEL;
		field DST_SEL_W(20:18) CHAN_SEL;
		field USE_CONST_FIELDS(21) BOOL;
		field DATA_FORMAT(27:22) INT; //not defined in the documentation!!
		field NUM_FORMAT_ALL(29:28) NUM_FORMAT_ALL;
		field FORMAT_COMP_ALL(30) FORMAT_COMP_ALL;
		field SRF_MODE_ALL(31) SRF_MODE_ALL;
	end microcode;

	
	microcode VTX_WORD2(32):
		enum(2) ENDIAN_SWAP:
			ENDIAN_NONE 0 default;
			ENDIAN_8IN16 1;
			ENDIAN_8IN32 2;
		end enum;
		
		enum(2) BUFFER_INDEX_MODE:
			CF_INDEX_NONE 0 default;
			CF_INDEX_0 1;
			CF_INDEX_1 2;
			CF_INVALID 3;
		end enum;
		
		field OFFSET(15:0) INT;
		field ENDIAN_SWAP(17:16) ENDIAN_SWAP;
		field CONST_BUF_NO_STRIDE(18) BOOL;
		field MEGA_FETCH(19) BOOL;
		field ALT_CONST(20) BOOL;
		field BUFFER_INDEX_MODE(22:21) BUFFER_INDEX_MODE;
	end microcode;

	tuple MEM_RD_SCRATCH(128):
		microcode MEM_RD_WORD0;
		microcode MEM_RD_WORD1;
		microcode MEM_RD_WORD2;
		microcode padding_32; 

		constraints:
			MEM_RD_WORD0.VC_INST == VC_INST_MEM;
			MEM_RD_WORD0.MEM_OP == MEM_RD_SCRATCH;
		end constraints;
	end tuple;

#define ALU_INST_OP2_TEMPLATE(instr) \
	tuple instr (64): \
		microcode ALU_WORD0; \
		microcode ALU_WORD1_OP2; \
		constraints: \
			ALU_WORD1_OP2.ALU_INST == OP2_INST_ ## instr; \
		end constraints; \
	end tuple
	
#define CF_INST_TEMPLATE(instr) \
	tuple instr (64): \
		microcode CF_WORD0; \
		microcode CF_WORD1; \
		constraints: \
			CF_WORD1.CF_INST == CF_INST_ ## instr; \
		end constraints; \
	end tuple

#define CF_INST_TEMPLATE_OPT(instr, opt) \
	tuple instr (64): \
		microcode CF_WORD0; \
		microcode CF_WORD1; \
		option opt ; \
		constraints: \
			CF_WORD1.CF_INST == CF_INST_ ## instr; \
		end constraints; \
	end tuple

	ALU_INST_OP2_TEMPLATE(ADD_INT);
	ALU_INST_OP2_TEMPLATE(LSHR_INT);
	ALU_INST_OP2_TEMPLATE(GROUP_BARRIER);
	
#define CF_ALU_INST_TEMPLATE(instr) \
	tuple instr (64): \
		microcode CF_ALU_WORD0; \
		microcode CF_ALU_WORD1; \
		option ADDR_IS_ALU; \
		constraints: \
			CF_ALU_WORD1.CF_INST == CF_INST_ ## instr ; \
		end constraints; \
	end tuple
	
	CF_ALU_INST_TEMPLATE(ALU);
	
	CF_INST_TEMPLATE_OPT(LOOP_START, ADDR_IS_CF);
	CF_INST_TEMPLATE_OPT(LOOP_START_DX10, ADDR_IS_CF);
	CF_INST_TEMPLATE_OPT(LOOP_START_NO_AL, ADDR_IS_CF);
	CF_INST_TEMPLATE_OPT(LOOP_END, ADDR_IS_CF);
	CF_INST_TEMPLATE_OPT(TC, ADDR_IS_TEX);
	CF_INST_TEMPLATE_OPT(VC, ADDR_IS_VTX);
	CF_INST_TEMPLATE_OPT(WAIT_ACK, ADDR_MEANS_COUNT);
	
	tuple NOP(64):
		microcode CF_WORD0;
		microcode CF_WORD1;
		option JUMPTABLE_SE_MEANS_NOTHING;
		option COND_MEANS_NOTHING;
		constraints:
			CF_WORD1.CF_INST == CF_INST_NOP;
		end constraints;
	end tuple;
	
	tuple MEM_RAT_CACHELESS(64):
		microcode CF_ALLOC_EXPORT_WORD0_RAT;
		microcode CF_ALLOC_EXPORT_WORD1_BUF;
		
		constraints:
			CF_ALLOC_EXPORT_WORD1_BUF.CF_INST == CF_INST_MEM_RAT_CACHELESS;
		end constraints;
	end tuple;
	
	tuple FETCH(128):
		microcode VTX_WORD0;
		microcode VTX_WORD1_GPR;
		microcode VTX_WORD2;
		microcode padding_32;
		
		constraints:
			VTX_WORD0.VC_INST == VC_INST_FETCH;
		end constraints;
	end tuple;
end;
